#ifndef DUMMY_EI_H
#define DUMMY_EI_H

// Temporary dummy Edge Impulse definitions for testing
// Replace with real Edge Impulse library when available

#define EI_CLASSIFIER_INPUT_WIDTH 96
#define EI_CLASSIFIER_INPUT_HEIGHT 96
#define EI_CLASSIFIER_LABEL_COUNT 2
#define EI_CLASSIFIER_OBJECT_DETECTION 0
#define EI_CLASSIFIER_SENSOR 1
#define EI_CLASSIFIER_SENSOR_CAMERA 1

typedef enum {
    EI_IMPULSE_OK = 0
} EI_IMPULSE_ERROR;

typedef struct {
    int dsp;
    int classification;
    int anomaly;
} ei_impulse_timing_t;

typedef struct {
    float value;
} ei_impulse_classification_t;

typedef struct {
    ei_impulse_timing_t timing;
    ei_impulse_classification_t classification[EI_CLASSIFIER_LABEL_COUNT];
    uint32_t bounding_boxes_count;
} ei_impulse_result_t;

typedef struct {
    size_t total_length;
    int (*get_data)(size_t offset, size_t length, float* out_ptr);
} ei_signal_t;

// Dummy namespace for compatibility
namespace ei {
    typedef ei_signal_t signal_t;
}

// Dummy function declarations
EI_IMPULSE_ERROR run_classifier(ei::signal_t* signal, ei_impulse_result_t* result, bool debug);

// Dummy labels (replace with your actual labels)
extern const char* ei_classifier_inferencing_categories[EI_CLASSIFIER_LABEL_COUNT];

#endif // DUMMY_EI_H