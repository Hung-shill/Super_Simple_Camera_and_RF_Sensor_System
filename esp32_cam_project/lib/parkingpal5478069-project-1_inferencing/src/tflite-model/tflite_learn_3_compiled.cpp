/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 13.08.2025 14:31:57

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 34880, -39412, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00017218115681316704, 0.00015014453674666584, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 24,-42,-50,87,-29,8,-21,58,93,6,-30,-36,-28,44,-9,77,75,-74,-15,-15,127,61,82,-63,-61,-69,6,111,8,-32,40,38, 
  /* [1][0][][] */ 50,68,68,-62,-84,66,-11,10,-36,-22,34,97,103,41,28,-17,-36,2,-61,-98,-83,36,21,102,80,63,-48,-19,95,-97,-127,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0046775913797318935, 0.0040789293125271797, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 101, 40, 58, 199, 709, 82, -124, 449, -72, 237, 55, 202, 79, 170, -264, 702, 17, -959, 195, 510, 521, 193, -238, 170, 215, 90, 216, 1131, 256, 52, 1434, 46, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.316980266594328e-05, 4.4054049794794992e-05, 4.6762408601352945e-05, 4.2136569391004741e-05, 4.425751103553921e-05, 4.0564988012192771e-05, 4.1338280425406992e-05, 4.1303355828858912e-05, 4.0163977246265858e-05, 5.0453058065613732e-05, 4.411200643517077e-05, 4.46199337602593e-05, 4.3249936425127089e-05, 4.3165397073607892e-05, 5.0723152526188642e-05, 6.9947229349054396e-05, 4.4914228055858985e-05, 7.329774962272495e-05, 3.9310729334829375e-05, 4.7588277084287256e-05, 4.9986363592324778e-05, 4.5009997847955674e-05, 4.2031326302094385e-05, 4.269187047611922e-05, 4.467556209419854e-05, 4.6125278458930552e-05, 4.9272970500169322e-05, 7.4538555054459721e-05, 4.1776234866119921e-05, 4.6366931201191619e-05, 6.1505539633799344e-05, 4.3765343434643e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -31,-55,102,13,98,-6,-86,-91,21,-94,-103,2,59,5,-30,55,-50,-31,-66,-56,-74,-111,7,101,-127,12,84,-45,113,7,-13,-75,79,-57,-88,66,-106,-97,-80,35,81,-96,-108,100,51,-121,100,-22,3,-59,-26,77,-68,-47,-91,107,21,74,118,-104,-71,89,-44,53,-3,23,75,94,62,99,73,-108,101,-122,42,89,-115,9,-59,9,53,18,95,-11,-72,-47,-80,89,20,103,-14,-108,21,56,39,-3, 
  /* [1][0][][] */ -46,28,-74,3,-30,93,40,20,41,-90,-94,119,74,-30,36,60,119,-32,39,119,-46,-14,43,25,22,23,-25,107,15,13,108,-52,58,110,-1,33,62,45,-2,-48,-54,-6,-31,-94,-32,24,-37,-53,-27,-86,123,38,17,90,-70,-41,24,109,76,93,-51,124,-58,-71,-46,44,79,43,113,37,19,19,-108,80,-48,46,77,-38,-42,41,-79,85,-47,-127,14,112,-55,-84,58,56,83,33,93,80,40,-42, 
  /* [2][0][][] */ 52,29,-59,92,-12,-41,85,98,-127,88,-25,122,92,-18,87,-106,-41,-17,35,53,-88,-22,109,18,-32,78,111,11,-59,81,83,98,-64,-11,-78,-93,-69,74,108,-11,-100,-81,5,-5,-75,97,-30,-70,88,33,93,-96,-36,65,27,23,-65,98,-42,15,-9,65,-25,70,94,51,49,83,-77,72,9,-58,34,-77,29,26,-53,-17,3,-20,35,-85,-6,-49,-12,-91,-6,-48,65,83,-30,14,-30,-85,-31,-94, 
  /* [3][0][][] */ 76,15,51,-25,-75,46,-117,43,87,17,69,-6,96,110,76,19,101,102,-54,18,127,-81,-63,-115,-11,-116,-84,115,42,-99,85,4,-53,-34,-19,-16,-90,-10,43,41,-27,-83,-98,13,81,48,-38,-78,72,-72,39,11,98,32,91,-106,-117,-124,-116,-62,-93,36,-37,71,55,-32,-58,-23,-35,-75,13,104,26,-86,68,-44,42,102,112,-27,-86,-118,39,106,37,61,-49,-90,-66,72,16,-109,96,-78,-97,55, 
  /* [4][0][][] */ 59,122,13,66,-14,-24,44,28,103,99,0,58,45,-20,4,-40,-16,14,-56,37,127,-62,96,54,-5,9,72,-38,-38,46,-68,-44,95,126,32,-89,-32,11,-100,58,-42,-41,-41,-57,50,126,51,57,49,-28,-19,-31,-77,60,-80,35,43,-77,31,17,20,-57,-25,-60,-41,68,15,-14,34,-75,-74,-68,-30,37,123,67,76,-10,19,-19,23,-39,-81,9,21,80,94,36,-76,-40,63,57,30,115,-90,7, 
  /* [5][0][][] */ 112,-101,77,93,49,-109,32,71,72,-113,7,-56,34,100,49,35,76,72,-72,107,33,46,26,-31,-121,-62,-2,-95,56,40,27,-93,-42,10,-66,22,-110,-52,61,37,-87,-68,34,102,-35,12,29,-54,-120,109,37,13,48,25,43,-17,110,63,-40,-31,40,-61,47,-70,-23,115,-24,32,89,10,111,-65,-48,73,-30,-77,6,-45,10,57,112,45,33,101,-100,84,6,19,53,-127,116,103,-9,16,89,-124, 
  /* [6][0][][] */ 14,-46,123,80,-88,-67,-3,63,-10,-93,5,-94,86,63,114,-121,40,-2,-4,105,-83,-119,114,62,-63,-87,-13,-54,-28,-119,47,-84,-88,-127,-49,-108,-1,45,-115,79,89,64,29,-14,-114,111,-82,-44,-88,17,-29,-62,62,-56,96,-29,14,-11,-66,115,-100,0,66,-74,-54,68,102,-49,80,-4,-108,-6,60,-67,-93,-40,-83,-94,-60,-18,37,-27,43,-21,-71,-84,-41,-95,93,101,103,18,-54,-60,77,-10, 
  /* [7][0][][] */ 126,71,-36,-38,-70,114,-14,12,97,9,-86,21,63,-84,55,84,55,22,9,127,61,40,6,82,-56,114,49,60,-73,117,-12,43,30,30,78,106,-98,105,6,-27,109,-78,90,72,49,-5,102,-103,42,-50,-107,-78,-15,98,25,36,125,-87,16,-46,18,-2,95,-108,-64,-57,79,26,-106,14,82,100,91,40,72,71,-66,66,-102,45,103,-36,-9,-70,95,47,-98,90,91,9,92,72,-56,-55,12,-64, 
  /* [8][0][][] */ 5,39,-48,-101,54,14,-84,-34,40,36,36,85,-4,-38,-101,-74,-87,95,-75,16,30,-3,76,118,-113,97,31,77,-81,11,-112,114,108,-40,44,-10,110,11,-37,62,80,117,-110,-127,-14,-25,-12,105,22,-99,-87,8,-80,-16,-41,-121,51,105,-122,98,109,38,39,107,-51,-56,-27,108,-104,53,36,-11,85,81,12,26,-50,111,86,118,34,82,-123,-78,45,45,66,-32,55,-15,-73,101,-94,-102,-66,101, 
  /* [9][0][][] */ -8,22,110,43,70,-98,-44,-105,74,30,-4,42,-25,-69,-93,4,5,0,-96,-39,17,79,-69,-75,124,-14,-15,35,-13,-62,-83,81,55,-4,18,-16,-45,31,-32,-48,36,-28,89,-69,75,42,-87,82,53,-16,-63,16,69,-62,-67,83,78,-57,30,3,-58,86,67,-69,-71,1,86,42,-39,95,108,-79,6,90,-87,-76,-40,-95,-19,127,44,23,83,39,-26,-55,32,39,103,69,-13,94,86,17,52,-3, 
  /* [10][0][][] */ -48,75,87,-57,-6,120,109,40,-2,41,32,-48,109,76,-18,7,-18,87,-92,-57,-17,19,63,-68,19,59,-95,-107,-41,87,-79,-65,83,107,124,80,-29,-10,-21,51,-27,99,-116,-36,-91,-72,-9,-58,-5,0,50,-11,68,29,-54,-26,-101,-2,45,-30,4,91,116,48,127,-63,-88,-18,34,-6,-91,-56,88,52,-82,105,-19,69,63,-8,76,3,58,86,-112,64,110,-46,14,-15,-12,-56,-37,-54,-31,-101, 
  /* [11][0][][] */ 118,10,-15,108,123,58,57,46,74,99,-60,127,8,-81,42,-63,-40,-86,67,46,35,66,38,-105,-106,-84,1,73,83,4,38,-5,-83,-58,61,50,-43,61,-11,-38,-16,88,-79,9,-37,-66,-89,-82,70,100,120,31,-79,-76,25,34,-66,-39,-2,-68,-68,99,91,17,42,97,-48,33,98,66,-71,-56,46,93,-92,51,-66,39,-36,58,-99,-22,-62,-52,34,-74,32,-47,-105,-26,6,-84,-71,-39,-52,-68, 
  /* [12][0][][] */ 23,64,-57,7,95,21,-31,47,-113,68,-6,30,-34,9,60,-80,-86,-24,-43,-76,28,-18,25,95,-74,-43,115,-96,98,22,-25,127,-86,-61,-37,21,9,-87,-5,57,122,28,-116,-39,-19,-93,-45,118,-48,-116,-65,86,44,9,-75,92,-22,-47,70,78,65,124,4,61,122,43,-40,119,67,110,44,81,87,106,-16,-5,-38,42,-116,-118,-57,104,52,3,-47,32,66,95,-109,-125,86,52,111,-24,41,42, 
  /* [13][0][][] */ 118,-61,100,102,100,122,85,76,38,-94,22,-15,99,72,77,-46,-108,-62,-63,34,70,-32,127,-50,-63,46,20,22,-81,-80,92,47,41,111,-12,41,-70,-34,38,80,-55,69,-57,13,-43,20,-8,-21,28,102,-25,-121,-90,38,108,-74,-48,38,-3,-62,-19,126,-66,21,-42,-56,-86,89,-27,-8,103,8,-87,38,-72,-39,-107,76,82,-86,54,-94,103,13,-88,-96,106,100,-21,-62,-78,61,121,-61,79,-30, 
  /* [14][0][][] */ -44,-82,63,48,67,-21,-13,-93,-104,-28,60,74,-24,-85,-74,-74,-42,-44,8,20,-49,21,4,50,-127,-64,-18,22,-100,-96,-63,36,79,-17,-27,-1,83,83,31,-83,-5,-103,17,76,54,-100,38,-73,99,30,68,36,83,-7,-14,15,-52,12,49,85,-13,-67,-25,63,-74,-9,66,-94,-76,-93,-87,80,-4,58,43,-78,44,-94,45,10,31,-24,-104,-57,-109,-80,-94,78,76,-6,57,-47,66,81,-12,18, 
  /* [15][0][][] */ 4,-1,4,51,56,-73,45,-56,83,-7,-35,-4,62,20,-64,-46,43,5,-48,26,43,30,54,71,83,46,13,61,19,33,38,-71,12,2,-36,-2,-37,114,76,-59,16,100,6,-5,14,-17,-15,-23,-4,-31,-8,62,-52,-60,-27,-6,57,25,-24,64,-20,-50,6,70,-25,51,-37,7,-42,-1,58,-41,16,28,56,-46,10,34,81,104,-30,42,-56,-6,-44,-5,-49,63,95,90,-47,-30,25,79,-67,127, 
  /* [16][0][][] */ -77,7,104,-64,32,90,-55,27,88,36,-109,50,-23,-38,-63,-50,88,68,66,61,106,87,-43,51,-11,48,-82,59,-101,5,28,-1,-98,66,47,51,-43,74,-57,-83,15,-29,81,87,57,113,105,-7,-53,-101,-6,127,-45,104,58,35,30,74,50,2,106,92,27,54,42,2,-38,87,31,81,-27,-17,26,107,64,86,-5,90,-101,26,16,-80,54,28,29,102,87,33,99,42,-1,98,55,-21,-92,71, 
  /* [17][0][][] */ 53,-86,-1,62,2,-8,-30,-37,-25,-24,54,67,87,0,-35,-9,60,56,40,66,-61,-40,14,-9,-34,45,-8,36,73,-5,11,83,-24,14,33,25,-15,-11,-43,27,-49,-75,-46,7,28,-39,44,-96,78,28,26,-36,1,59,67,-22,-96,84,-35,-45,29,-16,38,69,-20,-1,29,-46,-32,40,30,31,20,-127,-66,15,57,-30,24,-94,-4,0,-61,-110,-119,0,54,-61,-58,-10,-87,-35,30,58,26,-65, 
  /* [18][0][][] */ -98,116,120,-69,-10,-120,-111,11,24,91,-118,-46,-32,53,76,-59,24,-21,62,-16,120,-22,24,-81,42,-102,-16,125,34,39,-7,50,68,-26,-109,-107,-33,49,-40,76,-59,3,-51,-3,-114,14,42,-13,30,-17,74,64,-121,-6,3,104,-47,43,-39,-127,100,124,16,36,-78,-127,-27,103,78,-74,-61,119,-93,-7,-89,-112,63,65,11,-49,-57,-4,-33,-67,123,-37,75,82,-98,-59,-54,118,94,-53,53,3, 
  /* [19][0][][] */ 15,47,95,46,60,-77,92,78,127,-57,29,-12,-78,44,-48,66,65,-91,91,69,-1,82,-38,39,83,-68,27,-35,-76,-103,-59,38,95,-68,35,6,29,-46,-50,-98,40,-64,-51,32,-43,53,89,-73,-7,37,-32,87,-22,26,5,-1,33,87,4,-26,55,-41,89,60,-57,9,-23,7,-6,57,85,-40,-39,-95,-39,-57,8,-90,31,126,75,-92,-28,93,-63,11,12,26,113,58,19,69,-31,124,64,-1, 
  /* [20][0][][] */ -12,79,72,88,-71,71,22,48,55,7,-67,-3,-4,86,35,-46,-44,-25,-54,-11,40,-30,-53,-49,85,-59,-90,49,24,10,-37,94,99,40,-9,51,40,6,-13,-103,-70,-4,-57,-76,-12,-27,-44,104,69,-91,-84,62,47,101,45,0,89,60,86,75,102,-48,-52,-26,-21,-56,-39,20,-71,-58,-36,73,-48,-46,37,30,106,68,112,127,89,11,75,3,67,115,-10,92,46,110,43,55,15,34,2,44, 
  /* [21][0][][] */ 98,69,62,-93,99,-64,74,28,-36,-55,-59,52,14,30,-38,-89,-90,-20,32,-7,102,-58,76,-82,54,-77,-16,72,19,11,2,-8,3,26,-81,-105,115,88,-99,-17,-1,-4,32,-14,-93,-88,-91,93,-28,-65,4,69,42,73,-82,31,-53,61,-34,127,61,-63,21,-6,86,35,-29,-66,-92,0,64,81,31,-16,71,64,-106,-20,57,83,14,94,38,-79,18,-88,73,-102,-113,60,90,-101,-37,-84,75,-46, 
  /* [22][0][][] */ 26,-57,-86,-113,85,-59,108,50,-112,83,-78,-124,106,-127,-123,-90,37,84,-118,-68,85,-88,29,18,97,-11,-122,96,-63,-79,-69,-116,38,56,12,1,-2,-19,-60,-120,3,-16,-10,92,53,-122,72,-24,-68,-92,4,-19,-70,-93,-49,26,-18,-36,-31,-35,114,-83,-75,-120,-73,14,-119,-55,111,88,-36,-5,-81,8,60,-93,41,-53,62,90,99,-109,-82,-121,71,89,98,-36,-63,33,-75,51,11,8,-28,104, 
  /* [23][0][][] */ 76,-97,0,67,108,-95,11,-84,13,-69,98,94,30,-116,35,-45,105,-24,-101,104,94,-95,112,-39,-26,-6,101,24,79,61,86,-21,-43,54,29,43,109,-21,-95,25,-93,-17,-1,-111,-68,-108,103,28,73,-112,-74,-84,91,-52,-41,97,-86,-6,117,60,-104,-76,-42,-1,47,50,-108,-106,79,-4,111,-60,-4,-43,-39,-93,38,-17,92,85,-53,-49,26,-120,78,5,127,-47,-114,17,95,4,121,-67,-17,48, 
  /* [24][0][][] */ -58,-55,-98,-49,-67,-83,-58,-72,28,126,96,71,127,59,-20,-117,-59,52,31,-43,97,-86,-40,-38,41,-19,93,61,113,64,26,-38,0,23,60,41,-37,-92,76,1,-57,-111,98,6,26,-54,39,72,-88,-43,1,-12,84,67,79,-58,-4,93,46,23,97,13,44,106,-74,109,-37,-82,-79,73,-51,-8,-32,31,91,102,56,-66,-101,-105,-68,-79,-55,-121,-10,60,7,-118,6,-123,2,-58,2,21,-66,4, 
  /* [25][0][][] */ -67,-55,-76,-1,96,-50,-91,69,6,-94,-27,38,79,-7,-89,-20,-52,64,34,-101,60,69,-5,-55,-5,-41,-78,38,78,-70,50,121,82,-93,48,76,101,-77,-4,1,-69,78,-108,4,94,29,54,37,-103,84,-53,-16,50,-11,-47,17,-21,62,-86,81,118,54,55,50,13,83,-7,-1,-70,9,-31,-96,38,-127,70,22,62,68,13,-10,48,50,-42,62,-84,-48,-86,-100,-44,-55,88,31,-93,-21,-10,-109, 
  /* [26][0][][] */ 39,-100,6,0,-84,-5,-8,-19,-76,-109,90,64,-75,-30,5,-9,96,17,-66,-58,18,65,79,15,61,62,0,47,16,4,-82,-6,-11,-55,-93,-70,-58,91,-49,79,-83,103,60,29,-59,73,-23,98,-22,33,-1,110,9,-47,-1,-104,106,47,37,17,-4,-86,55,-19,100,-15,-43,57,-73,76,71,84,70,-75,-78,23,40,-92,-83,25,-12,78,74,-38,67,5,-50,28,-44,119,34,15,-29,123,43,127, 
  /* [27][0][][] */ 8,36,-10,-50,-62,-52,-26,-3,72,55,42,-67,-10,51,47,18,31,-2,41,-21,-36,22,18,4,-14,32,-61,16,46,22,-15,-7,48,46,-42,-46,-14,5,-50,44,-50,71,52,42,70,54,49,91,60,58,40,15,-30,-34,1,-11,70,-13,-39,-34,4,-37,-8,45,32,-27,-56,71,31,3,-43,15,44,13,28,-30,73,-33,76,127,80,-5,73,3,-11,-10,-6,95,21,59,2,-28,23,20,58,93, 
  /* [28][0][][] */ 97,1,92,53,-113,-60,-97,-70,-49,-111,71,76,-76,-86,15,110,104,119,-73,79,-34,25,-105,-75,-127,85,-79,-56,-69,-72,5,-11,-113,22,88,74,9,-109,-34,40,110,43,-98,58,-113,-11,14,49,24,-67,-91,-36,-80,21,58,45,60,-4,85,62,4,-40,-95,9,64,82,-14,88,-72,33,-102,-37,77,27,1,-94,-114,-68,-81,46,-67,-93,115,-24,68,-124,75,-87,-106,-126,-37,-62,-42,42,-113,-74, 
  /* [29][0][][] */ 47,56,52,-47,-81,8,-107,6,127,-10,-85,-93,100,-87,-43,-39,-94,98,31,-52,-54,-19,51,10,-18,11,-42,-23,-96,-8,90,-5,57,4,-72,-49,-8,105,-12,83,45,104,-37,81,5,106,-38,-22,28,-3,51,-74,63,-88,102,43,-83,51,-47,93,-111,89,-82,-50,-59,-57,50,88,86,-71,44,-65,108,80,60,26,112,-55,-17,54,-3,-78,-6,-63,67,116,36,86,-21,107,78,73,-96,34,-3,71, 
  /* [30][0][][] */ 25,-1,-3,49,-49,21,-31,5,127,-9,22,-21,-52,36,54,38,2,36,71,-35,65,-53,-43,45,-22,30,-36,117,4,-69,-57,11,-30,-32,-67,-15,54,33,12,13,67,6,39,103,98,10,99,77,-33,68,39,19,94,-16,0,84,-29,-30,-14,-21,-49,10,-41,-8,-49,-44,-51,84,-28,94,63,-5,-43,117,57,-35,0,-35,-7,8,64,36,-58,23,-46,52,-61,118,42,-28,86,59,-19,31,20,9, 
  /* [31][0][][] */ 77,-86,46,104,43,57,-64,-97,16,-27,-79,-96,98,-99,-49,115,-68,-91,38,52,73,48,-25,102,61,-114,29,45,-78,-78,40,103,24,21,-93,-7,102,-10,-62,-121,58,-62,-20,38,10,-49,-16,37,69,26,90,-21,-116,-60,-86,18,-113,62,13,109,-42,-6,88,-80,67,110,-48,-73,72,-106,-91,12,-87,-27,9,10,-55,-45,65,127,-68,-44,60,78,73,100,-92,37,36,-23,-57,-54,8,117,-6,8, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018347166478633881, 0.0018722970271483064, 0.0019874023273587227, 0.0017908042063936591, 0.0018809442408382893, 0.0017240119632333517, 0.0017568768234923482, 0.0017553926445543766, 0.0017069689929485321, 0.0021442549768835306, 0.0018747602589428425, 0.001896347152069211, 0.0018381222616881132, 0.0018345293356105685, 0.0021557339932769537, 0.0029727572109550238, 0.0019088545814156532, 0.0031151543371379375, 0.0016707059694454074, 0.0020225017797201872, 0.0021244203671813011, 0.0019129249267280102, 0.0017863312968984246, 0.0018144043860957026, 0.0018987113144248724, 0.0019603243563324213, 0.0020941011607646942, 0.0031678883824497461, 0.0017754898872226477, 0.0019705945160239935, 0.0026139854453504086, 0.0018600270850583911, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1333, 65, 3604, 5522, 3295, -1757, 3545, -897, -1468, -648, 4346, -2037, 4340, 5025, 1872, 1900, -699, -641, -1687, 4423, 2385, -420, 1814, -661, -901, 2942, 1454, 1790, 6081, 2892, 4080, 1119, 1097, 5196, 4055, 2829, -294, 3217, 2680, -3981, -419, 941, 56, 2082, -1341, 504, -1133, 811, -8996, 1415, 947, -2497, 6055, -1048, 1903, 1438, 991, 2633, -570, -1908, 219, 1613, 393, 4142, 4947, 3250, 2188, 5086, 4017, -618, 2381, 6010, 4145, -1371, 4858, 7401, 938, -3972, 586, 1634, 10232, 1723, -441, -2669, 1005, 881, 1337, -1392, 3189, -215, 3346, 1301, 20, -2438, -134, 1975, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00015716535563115031, 0.00027457199757918715, 0.00016195166972465813, 0.00014008265861775726, 0.000189513637451455, 0.00024049160128924996, 0.00016738977865315974, 0.00024883681908249855, 0.00021713948808610439, 0.00021980976453050971, 0.00014260716852732003, 0.00020742444030474871, 0.0001299416326219216, 0.00012538637383840978, 0.00017200486036017537, 0.00022143391834106296, 0.00023637367121409625, 0.00015789087046869099, 0.00017472464242018759, 0.00013911246787756681, 0.00020221207523718476, 0.0002542746951803565, 0.00019322970183566213, 0.00017453321197535843, 0.00022935212473385036, 0.00020467063586693257, 0.00020044516713824123, 0.00020850836881436408, 0.00011853835894726217, 0.00014803449448663741, 0.00012816378148272634, 0.00022352953965310007, 0.00026565694133751094, 0.00012057728599756956, 0.00014870708400849253, 0.00017275543359573931, 0.00025989167625084519, 0.00015362071280833334, 0.00014337030006572604, 0.00012822906137444079, 0.00019923791114706546, 0.00022293481742963195, 0.00018377855303697288, 0.00012969420640729368, 0.00017703685443848372, 0.00020031673193443567, 0.00021356159413699061, 0.00022423882910516113, 7.5947602454107255e-05, 0.00018313330656383187, 0.00026810352574102581, 0.00018194862059317529, 0.00012467279157135636, 0.00015187854296527803, 0.00017700273019727319, 0.00018451064534019679, 0.00019102015357930213, 0.0001491119182901457, 0.00026555469958111644, 0.00015628174878656864, 0.00023474662157241255, 0.00016788073116913438, 0.00020391683210618794, 0.0001600385585334152, 0.00013662787387147546, 0.00014619559806305915, 0.000170952218468301, 0.00014886543795000762, 0.00016501922800671309, 0.00019115179020445794, 0.00020643864991143346, 0.000114024369395338, 0.00011430809536250308, 0.00016744896129239351, 0.00014887853467371315, 0.00010846810619113967, 0.00014338300388772041, 0.00015773018822073936, 0.00019166832498740405, 0.00017038088117260486, 8.4723302279599011e-05, 0.00016633099585305899, 0.00018086776253767312, 0.00015156857261899859, 0.00022001635807100683, 0.00017192753148265183, 0.00020610513456631452, 0.00022553236340172589, 0.00021414492221083492, 0.00020775960001628846, 0.0001782807958079502, 0.00016936259635258466, 0.00021413860667962581, 0.00016296708781737834, 0.00022356239787768573, 0.00016903570212889463, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -4,105,-85,32,42,-41,107,68,-65,0,41,-97,82,127,-67,35, 
  /* [1][0][][] */ -28,1,-63,-32,-6,51,25,-127,31,-51,-23,-52,-13,-37,-49,3, 
  /* [2][0][][] */ -22,-32,39,85,29,49,-112,127,-14,6,72,-61,-26,-73,-38,60, 
  /* [3][0][][] */ 97,-90,80,-13,-13,-44,-25,127,-35,59,77,50,-2,61,5,21, 
  /* [4][0][][] */ -38,-10,-12,41,-101,4,-25,-127,-8,-13,38,-14,40,49,97,126, 
  /* [5][0][][] */ 127,24,-25,-23,-71,29,24,74,21,-8,55,91,121,32,-82,-6, 
  /* [6][0][][] */ 22,-26,-58,-58,-90,-5,6,-58,-64,-56,-25,27,98,51,127,3, 
  /* [7][0][][] */ -55,33,-28,-76,-3,-62,-63,13,-93,52,-67,-63,-127,-39,13,99, 
  /* [8][0][][] */ 51,45,82,5,46,20,81,9,66,-28,48,6,-127,-27,-81,22, 
  /* [9][0][][] */ -40,57,32,-45,-25,-15,34,-14,-30,48,-42,16,42,127,24,26, 
  /* [10][0][][] */ 86,54,-49,66,-38,-21,48,-49,-80,-31,-56,-109,-127,-79,5,110, 
  /* [11][0][][] */ 43,13,54,3,-21,-35,15,94,-86,20,-24,4,-8,-6,49,127, 
  /* [12][0][][] */ -38,-7,5,-6,11,-13,127,35,-75,22,13,-15,-3,81,-49,123, 
  /* [13][0][][] */ 15,41,31,74,117,44,124,127,-44,117,-89,-78,48,85,-106,-34, 
  /* [14][0][][] */ -107,127,4,-14,-15,-6,68,-3,-45,31,118,-12,-89,18,-44,56, 
  /* [15][0][][] */ -11,-12,-127,-47,85,-42,-97,-40,-20,-18,-23,-71,-7,-82,-53,42, 
  /* [16][0][][] */ 119,-20,12,-6,37,-23,35,-21,-36,12,127,57,49,3,-34,10, 
  /* [17][0][][] */ 8,10,-27,-105,-5,-54,113,-127,6,-22,-49,35,35,78,5,42, 
  /* [18][0][][] */ 24,111,-12,-38,61,-67,-28,-52,-36,127,-28,-1,-24,46,-9,-33, 
  /* [19][0][][] */ -57,-100,117,-92,33,-127,34,-45,36,36,91,97,30,-12,61,-21, 
  /* [20][0][][] */ -14,105,64,0,0,-10,32,-36,57,-5,104,-27,-127,-29,-78,-2, 
  /* [21][0][][] */ -64,38,24,24,64,34,59,48,-127,55,-43,17,-15,13,-51,-28, 
  /* [22][0][][] */ 22,-75,39,8,13,-127,110,-2,12,-52,-36,-66,42,-77,-55,-41, 
  /* [23][0][][] */ -63,-116,55,70,40,-12,22,-47,30,-39,77,4,5,81,91,127, 
  /* [24][0][][] */ -1,-3,21,88,48,23,-57,-127,63,16,-38,14,2,2,-24,-29, 
  /* [25][0][][] */ -11,25,20,-44,-20,2,2,-30,-25,57,-46,-9,38,127,28,-2, 
  /* [26][0][][] */ -56,82,5,19,23,-91,-3,-31,9,20,17,67,13,3,-78,127, 
  /* [27][0][][] */ -17,-127,-48,7,-62,95,3,-56,23,-36,56,-33,24,-48,-101,-22, 
  /* [28][0][][] */ -31,7,36,77,20,3,-35,-127,-124,47,108,-14,75,10,-47,-18, 
  /* [29][0][][] */ -127,121,-27,-39,-39,15,-122,-79,-57,-35,6,-3,15,-56,-117,76, 
  /* [30][0][][] */ 55,84,-62,75,-121,-109,-71,-20,-43,-5,10,-112,127,35,-20,108, 
  /* [31][0][][] */ 127,20,-64,-36,-70,20,109,40,-48,-16,71,55,35,19,-31,22, 
  /* [32][0][][] */ -36,-29,127,1,-12,78,70,18,-14,-16,-13,28,3,64,67,34, 
  /* [33][0][][] */ 2,32,-56,-60,-22,17,127,11,-11,-20,25,-55,90,115,-49,46, 
  /* [34][0][][] */ -80,-21,86,19,26,-57,89,-10,-127,29,38,-36,47,59,-57,-23, 
  /* [35][0][][] */ 7,35,-56,7,-90,122,-37,-24,-29,127,9,93,-70,79,19,46, 
  /* [36][0][][] */ -8,-77,127,-49,-53,17,-39,-7,17,24,-47,82,0,-83,-36,49, 
  /* [37][0][][] */ 80,-9,72,-30,114,-72,-49,29,-59,127,-70,0,-86,-41,113,-22, 
  /* [38][0][][] */ 60,56,13,-106,-20,-70,-102,69,-101,69,-104,-59,-72,-127,-121,80, 
  /* [39][0][][] */ -75,23,-59,-35,-84,-77,68,18,-127,-33,28,83,29,4,-9,57, 
  /* [40][0][][] */ 127,26,9,-82,-57,34,1,-37,-26,-25,-58,-80,13,47,50,20, 
  /* [41][0][][] */ 87,-81,-65,-55,-3,-5,-60,-24,63,-25,3,-52,127,-71,54,-33, 
  /* [42][0][][] */ -6,-81,-41,127,5,-85,-106,21,10,22,9,51,-76,71,-45,-6, 
  /* [43][0][][] */ -96,-56,-46,-127,-54,7,-2,82,56,-125,-46,39,-29,-54,-27,91, 
  /* [44][0][][] */ -48,27,36,-41,-14,-16,40,123,127,-78,65,108,102,41,-23,-6, 
  /* [45][0][][] */ 32,78,-71,87,127,-83,-44,-67,116,-63,67,-70,-32,13,-76,61, 
  /* [46][0][][] */ -21,-41,10,-5,91,-25,32,19,-3,127,-29,-120,34,56,-42,71, 
  /* [47][0][][] */ 82,-40,-30,-9,77,-10,-47,-54,0,127,-25,31,-9,-96,-72,7, 
  /* [48][0][][] */ 13,32,-10,-127,-8,-54,122,-126,-2,-1,-35,53,51,66,10,38, 
  /* [49][0][][] */ -32,127,-82,43,44,-54,71,71,-31,29,44,-95,-23,83,122,-93, 
  /* [50][0][][] */ 9,41,-21,-2,-127,-4,-56,-53,48,65,31,29,-30,-34,-5,42, 
  /* [51][0][][] */ 127,-31,-44,-12,-47,78,-88,-45,39,-15,-34,60,-29,-60,2,40, 
  /* [52][0][][] */ -18,-46,39,69,-69,-127,-123,-13,-47,-45,-25,-65,19,-69,-4,107, 
  /* [53][0][][] */ 30,101,59,-127,1,105,99,-23,-15,-28,-1,-39,86,-117,5,63, 
  /* [54][0][][] */ 36,119,10,-16,2,-85,-108,52,10,-21,-47,127,77,87,27,54, 
  /* [55][0][][] */ -37,-8,53,25,38,-45,121,85,-86,-8,24,10,127,43,-11,12, 
  /* [56][0][][] */ 127,13,17,32,-38,107,-60,-73,-17,42,-84,3,-54,84,2,26, 
  /* [57][0][][] */ -43,-37,-46,-35,-81,-105,62,-23,-127,-27,63,58,16,39,-13,61, 
  /* [58][0][][] */ 47,-47,62,26,0,-70,-13,5,22,-12,-127,-23,29,-41,-42,49, 
  /* [59][0][][] */ 79,18,-127,86,4,28,95,-32,-77,-44,32,-102,-117,-61,24,119, 
  /* [60][0][][] */ -4,29,-9,21,-12,-21,-27,4,-36,-80,62,127,-47,-126,-34,-10, 
  /* [61][0][][] */ -23,24,74,-92,-84,39,6,112,-22,-94,59,63,89,-5,7,127, 
  /* [62][0][][] */ 82,44,-5,-127,-23,-1,9,-39,-10,33,-31,41,27,-18,-91,-67, 
  /* [63][0][][] */ 0,-21,-2,-6,-74,-75,-52,9,-76,-13,-27,-18,127,4,42,-2, 
  /* [64][0][][] */ 39,15,-23,54,-122,-55,-22,-90,55,125,45,-2,46,-49,-50,127, 
  /* [65][0][][] */ -20,18,-21,-17,-90,70,25,-32,47,-117,107,-65,80,66,-127,73, 
  /* [66][0][][] */ -127,85,-93,-82,48,-24,-112,-64,-96,103,82,6,-112,-51,37,43, 
  /* [67][0][][] */ -1,-35,-127,-112,63,74,15,-24,-25,-6,46,-21,25,37,19,50, 
  /* [68][0][][] */ 59,27,-16,-52,-74,31,21,34,-67,67,127,-13,-10,-46,-124,7, 
  /* [69][0][][] */ 81,-98,56,-52,13,-123,-32,127,-11,63,92,81,-15,80,-35,1, 
  /* [70][0][][] */ 61,17,127,40,84,-32,127,6,31,35,-67,39,-65,58,-80,42, 
  /* [71][0][][] */ 9,31,104,-72,-127,-78,11,10,-22,-11,18,-111,-81,0,18,23, 
  /* [72][0][][] */ -53,-88,26,-126,70,-15,5,44,-78,17,-117,-18,61,126,-64,127, 
  /* [73][0][][] */ 24,23,59,-8,127,-108,-37,-1,-35,108,-99,36,-86,-60,123,-10, 
  /* [74][0][][] */ -111,-2,-120,-69,71,-38,-40,24,-75,4,-127,-35,-38,-58,-34,66, 
  /* [75][0][][] */ 100,-20,52,-56,13,-3,-127,-29,-14,-107,84,3,7,-6,-16,1, 
  /* [76][0][][] */ -8,-54,-36,103,41,98,111,-58,85,-127,76,119,34,-77,-68,41, 
  /* [77][0][][] */ -40,-36,127,-25,42,-26,-39,-125,16,18,32,91,47,52,16,-7, 
  /* [78][0][][] */ -60,5,12,-40,5,-53,37,-6,32,-18,16,-97,-114,-79,-127,-61, 
  /* [79][0][][] */ -118,-68,-19,12,127,34,-4,17,19,30,-18,57,-42,-72,-65,-15, 
  /* [80][0][][] */ -4,-122,51,127,-20,-14,-106,77,7,22,58,1,-86,-20,-4,49, 
  /* [81][0][][] */ 117,77,-25,81,-8,33,28,127,14,10,121,60,120,31,60,-14, 
  /* [82][0][][] */ -49,6,17,-31,31,-127,-116,-84,1,78,-41,-33,-27,101,-73,-28, 
  /* [83][0][][] */ 114,-21,82,-23,-37,-7,-127,-8,24,-117,11,-54,-17,-17,22,-19, 
  /* [84][0][][] */ 4,-63,-87,20,127,42,39,22,-108,21,-108,-20,49,-27,-61,4, 
  /* [85][0][][] */ 5,94,45,-61,107,7,54,-121,127,-44,44,-11,98,-77,6,4, 
  /* [86][0][][] */ 120,-34,127,45,-4,-67,87,37,-70,-54,-92,-38,35,23,-77,22, 
  /* [87][0][][] */ -4,13,29,-81,64,-30,-39,11,34,-39,76,-38,-86,-127,-5,26, 
  /* [88][0][][] */ -51,-27,38,4,21,29,-67,-44,-8,15,-65,-127,-41,-41,-7,-21, 
  /* [89][0][][] */ -79,18,20,-70,22,6,-127,24,87,27,-70,-17,-14,-85,-45,-25, 
  /* [90][0][][] */ -7,-11,-30,-88,127,21,-64,41,42,57,35,-15,35,25,-72,-20, 
  /* [91][0][][] */ -58,-88,28,59,-32,5,-5,88,-22,-59,20,-48,-16,68,34,127, 
  /* [92][0][][] */ -25,80,-2,-19,-24,57,-91,48,-42,-15,69,0,-32,127,46,28, 
  /* [93][0][][] */ -3,69,-46,-69,68,86,-76,7,69,59,73,52,-127,26,-42,76, 
  /* [94][0][][] */ 21,59,89,13,-127,-38,14,-11,20,-15,25,-15,-46,-26,12,-19, 
  /* [95][0][][] */ 14,45,48,15,112,-30,-106,78,3,25,-71,100,3,4,127,-42, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0017831831937655807, 0.003115267725661397, 0.0018374882638454437, 0.0015893644886091352, 0.0021502035669982433, 0.0027285946998745203, 0.0018991883844137192, 0.0028232787735760212, 0.0024636439047753811, 0.0024939405266195536, 0.0016180073143914342, 0.0023534179199486971, 0.0014743052888661623, 0.00142262177541852, 0.0019515507156029344, 0.0025123681407421827, 0.0026818730402737856, 0.0017914146883413196, 0.0019824090413749218, 0.0015783567214384675, 0.0022942789364606142, 0.0028849765658378601, 0.0021923657041043043, 0.0019802371971309185, 0.0026022072415798903, 0.0023221734445542097, 0.0022742317523807287, 0.0023657160345464945, 0.0013449249090626836, 0.0016795851988717914, 0.0014541340060532093, 0.0025361448060721159, 0.0030141181778162718, 0.0013680583797395229, 0.0016872164560481906, 0.0019600666128098965, 0.0029487062711268663, 0.0017429660074412823, 0.0016266658203676343, 0.0014548746403306723, 0.0022605343256145716, 0.0025293971411883831, 0.0020851339213550091, 0.0014714980497956276, 0.0020086432341486216, 0.0022727744653820992, 0.0024230494163930416, 0.0025441923644393682, 0.00086169422138482332, 0.0020778130274266005, 0.0030418769456446171, 0.0020643717143684626, 0.001414525555446744, 0.0017231993842869997, 0.0020082560367882252, 0.0020934401545673609, 0.0021672963630408049, 0.0016918096225708723, 0.0030129582155495882, 0.0017731578554958105, 0.0026634128298610449, 0.0019047587411478162, 0.0023136208765208721, 0.0018157821614295244, 0.0015501668676733971, 0.0016587213613092899, 0.0019396075513213873, 0.0016890129772946239, 0.0018722923705354333, 0.0021687899716198444, 0.0023422332014888525, 0.0012937096180394292, 0.0012969287345185876, 0.0018998599844053388, 0.0016891616396605968, 0.0012306687422096729, 0.0016268098261207342, 0.0017895916244015098, 0.002174650551751256, 0.0019331251969560981, 0.00096126249991357327, 0.0018871756037697196, 0.0020521082915365696, 0.0017196825938299298, 0.0024962846655398607, 0.0019506732933223248, 0.0023384492378681898, 0.0025588686112314463, 0.0024296678602695465, 0.0023572205100208521, 0.0020227569621056318, 0.0019215719075873494, 0.0024295961484313011, 0.0018490090733394027, 0.0025365175679326057, 0.0019178629154339433, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 9703, 15798, -549, 3715, -3771, 6909, 2400, 4468, 15063, -1619, -7902, 9086, -14181, 15405, 3264, 10960, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.6521290389355272e-05, 7.7219592640176415e-05, 6.3609950302634388e-05, 6.9177614932414144e-05, 8.6429805378429592e-05, 9.0371861006133258e-05, 6.2178361986298114e-05, 6.2230697949416935e-05, 0.00010004264186136425, 8.0005724157672375e-05, 6.8050241679884493e-05, 6.4498359279241413e-05, 6.8296227254904807e-05, 5.9826306824106723e-05, 7.414463470922783e-05, 7.2141119744628668e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -114,37,60,-26,-79,-14,-69,-12,-61,7,-5,-28,39,52,39,-34,13,0,105,14,13,-56,127,67,48,17,0,35,-66,-116,-95,11,-37,-45,31,24,9,16,1,29,-17,-2,-87,8,-70,-13,3,89,-20,29,-43,-15,-3,1,25,-52,-109,8,-20,75,56,28,-6,-4,-32,-58,-47,32,-54,-63,11,-21,2,-6,-77,-50,-55,4,-37,8,-63,70,86,-77,13,52,5,39,34,-25,-1,-22,-30,-41,-53,17, 
  /* [1][0][][] */ 32,22,39,-52,-57,-17,-7,2,-8,25,36,-53,-6,-24,-56,-34,-10,7,-72,27,-7,-73,18,44,-10,-60,0,-47,68,-107,110,-79,48,16,-20,36,34,73,-14,-54,35,8,5,-15,7,43,-127,-43,-62,-64,-31,-26,23,-46,-41,39,16,-9,-20,12,21,45,-13,-88,-9,-7,-63,-8,12,-21,-84,-13,-28,-19,15,-70,10,24,31,-74,-21,-15,-80,-36,30,-33,-20,25,-73,-12,-60,37,22,59,-61,55, 
  /* [2][0][][] */ 81,-33,28,16,26,-87,69,-3,-12,-11,-14,-2,-97,-41,16,-36,-97,-35,-53,53,26,-58,-50,21,-3,-79,4,-26,-33,61,-49,121,-60,127,-31,20,-20,-18,-22,-14,-111,77,66,14,-72,-5,-21,-7,21,-2,-49,-58,35,-26,-21,76,41,-8,60,1,-4,35,-45,14,81,16,-5,-2,49,55,-45,-2,60,54,71,34,37,-76,64,51,89,-4,-35,34,-69,30,17,79,17,9,-29,23,-40,45,-36,33, 
  /* [3][0][][] */ -6,-9,-21,5,15,-11,10,-61,-23,59,33,60,26,-15,-48,45,3,-28,31,14,22,127,35,-47,9,13,-22,8,67,-32,67,-23,-23,29,-27,-33,20,45,35,8,-76,-34,-42,24,-30,28,18,3,-24,-56,-7,-28,48,-90,-31,-45,12,87,-27,0,-13,-14,-49,5,31,52,-41,0,-23,-1,13,-68,-29,-50,31,-16,19,0,-35,-36,-29,-3,-49,15,-11,-44,29,-24,0,24,22,-18,47,24,-38,61, 
  /* [4][0][][] */ 32,4,-51,18,19,23,-45,13,-34,76,107,-15,4,9,-4,-46,11,-27,-14,43,10,-42,50,86,-61,3,-127,14,-46,-62,0,23,-61,-41,15,67,17,35,19,41,-39,-31,40,-25,-9,21,-25,46,-24,66,35,19,65,-11,-70,17,43,-8,-2,-8,46,4,26,10,-52,10,-27,6,-59,43,-42,52,29,-66,-33,-44,24,-56,-7,12,-43,69,-80,6,-29,24,27,-63,50,9,36,18,-59,-23,58,22, 
  /* [5][0][][] */ -77,31,26,-8,42,-15,50,-29,-17,31,14,-29,48,-12,-35,-41,-5,-48,55,17,-127,-21,-73,43,-36,3,41,9,39,-75,-27,51,57,117,-13,60,-2,21,38,-3,-35,102,72,-30,-4,77,46,-10,12,36,-4,32,31,-38,36,-93,35,-48,-78,-61,57,95,-44,-19,68,-42,-66,-61,-70,-6,-55,-6,-33,6,-20,-42,20,-37,-43,-13,121,-41,20,-83,-91,35,23,-21,-50,45,36,2,-18,38,27,75, 
  /* [6][0][][] */ 41,-8,-65,30,-29,-109,96,90,-62,59,-22,76,-127,-83,62,47,-5,-44,-8,3,-1,-10,-65,-61,-57,36,68,28,31,33,99,-53,22,15,9,-81,9,11,31,64,6,7,-55,-25,6,-72,-73,22,21,-122,-28,65,27,4,-21,-57,64,35,24,-2,-106,41,-88,6,32,4,1,54,52,18,4,-50,-26,25,84,27,67,-23,44,-74,-10,-48,-73,65,7,-69,35,24,-45,54,28,25,-12,6,-39,105, 
  /* [7][0][][] */ 31,78,-46,-49,-31,-18,34,18,-68,23,-38,-42,-29,22,6,-13,-42,-52,-27,54,-6,127,1,28,-5,6,13,30,44,48,78,-29,66,31,-23,14,-1,-12,5,41,-71,-2,-4,-54,19,-42,76,-27,37,-66,-69,-29,-35,2,4,-3,18,22,-97,11,-10,111,19,-23,-25,-6,-42,15,-46,-6,-95,27,8,61,-35,46,-50,50,11,-70,-19,-54,52,-65,39,-24,-12,2,-11,75,-76,47,64,-37,-39,5, 
  /* [8][0][][] */ -5,76,-55,41,-44,-27,-88,31,-103,-35,23,2,-26,48,22,87,6,-62,17,4,25,-2,0,-4,-31,80,-4,23,-18,-23,-54,-25,-19,-49,-29,-54,-38,25,45,18,-9,-32,24,10,-39,-24,14,-21,-9,1,67,71,18,-22,-67,96,-40,37,-15,-40,-35,19,20,50,-41,-67,-33,-11,-52,17,3,2,-31,-52,-116,-14,-50,24,-62,-35,-32,-11,-48,-34,-2,-3,22,22,12,65,-50,-3,-90,-127,39,-56, 
  /* [9][0][][] */ -20,22,-70,46,-24,-34,73,47,2,52,-31,89,-36,-25,31,127,8,21,59,17,26,11,42,-97,-34,-7,26,-9,16,-17,47,42,-32,-5,-2,-119,21,-17,-23,-26,-7,16,47,-29,-17,3,13,20,26,78,8,-7,-67,-71,-4,-6,5,-17,72,-13,-70,45,-62,-30,86,-3,-32,8,-61,18,30,41,-2,84,-19,-23,-29,19,-47,-15,51,-18,65,-7,26,-10,-7,-35,-52,19,-3,2,59,33,-57,-2, 
  /* [10][0][][] */ 71,4,-30,-2,-32,-27,66,1,16,-23,-35,-8,-100,-23,12,-11,-65,-21,12,20,45,28,22,1,-46,72,44,-3,-46,-72,-25,-16,66,-32,48,-2,68,-87,76,113,21,-61,9,8,-16,-102,-17,67,20,67,-77,-42,-30,29,13,50,22,-64,87,52,-10,47,-62,-13,-5,-53,16,55,24,-34,-16,39,127,36,20,-83,33,-45,51,-12,-41,39,40,18,-32,-7,7,50,-37,-15,22,46,45,64,-44,10, 
  /* [11][0][][] */ -42,-36,47,-67,18,-9,-43,-47,43,-42,11,-9,-17,-1,-3,5,-58,-5,62,11,-63,17,-79,-85,18,23,-45,33,32,-58,28,-38,22,-4,26,-15,-72,3,-127,19,-75,64,-45,57,16,12,-3,-39,17,-32,-68,-56,17,32,73,-63,-26,-63,11,-51,-22,-52,-17,-126,-1,-72,60,69,110,15,77,-22,-41,-11,73,-31,87,34,17,64,34,-10,-29,84,75,1,1,-21,-73,-69,-8,26,55,44,60,75, 
  /* [12][0][][] */ 40,-17,12,-37,45,106,-6,29,53,60,-17,56,5,37,25,0,-61,61,6,54,127,-3,69,-70,23,15,-65,-66,-16,79,11,1,31,-12,11,-50,41,-3,-30,-50,29,-27,48,57,-15,23,-4,-2,-75,11,-16,20,-44,-23,7,18,-33,52,24,51,28,-97,12,-90,0,94,-18,-34,6,-56,59,13,4,20,-11,43,-7,51,-71,-14,-18,44,119,16,-4,73,-24,-61,77,2,-91,44,70,6,-35,-82, 
  /* [13][0][][] */ -10,46,-11,-50,-30,-13,1,-43,22,-34,-40,-75,45,-119,-41,-82,-18,-23,-101,-15,-91,-44,21,94,-40,6,118,1,24,-34,63,39,17,-7,-125,126,-39,-60,31,-65,127,6,3,28,1,-101,54,-27,64,-16,-63,23,5,-4,-13,80,73,-66,-37,-8,51,34,0,-96,-1,42,-49,38,-65,-48,-88,3,-59,27,-45,-94,-114,11,26,87,-15,78,45,-103,56,47,34,-15,-14,-24,-8,16,-61,15,-44,-5, 
  /* [14][0][][] */ -9,22,-92,-25,91,87,-94,-11,25,-51,95,-4,22,-17,-42,-68,-69,15,45,127,5,-21,-5,15,-4,42,-40,74,9,-7,-33,11,71,-3,-39,10,-19,61,79,18,56,8,32,13,-10,-37,71,-52,34,0,-5,-17,63,13,-35,24,5,69,-109,-19,-11,-64,-34,-113,8,-51,-49,-2,-80,53,-11,33,-12,-35,-21,-35,37,-15,-53,-35,30,-7,-6,-6,-18,42,-12,-33,-34,78,77,19,0,-43,-33,-66, 
  /* [15][0][][] */ -76,-38,56,-62,24,-29,-35,-95,0,19,-19,74,-21,-32,45,93,-114,-7,3,-69,43,-32,-11,-94,48,-15,60,-60,-64,-111,-60,28,-39,54,83,-118,-14,-34,32,-40,-17,-15,40,-6,7,-12,60,120,-67,-31,2,-53,-73,53,4,-55,-100,-27,125,16,-30,9,-95,26,-65,-5,-5,22,68,-94,89,-27,83,-34,-44,-51,17,21,49,-2,-18,103,66,26,7,-21,-127,25,-15,-57,-95,26,54,-40,-51,76, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002402154728770256, 0.0032818326726555824, 0.0027034226804971695, 0.0029400486964732409, 0.0036732666194438934, 0.0038408038672059774, 0.0026425803080201149, 0.0026448045391589403, 0.0042518121190369129, 0.0034002433530986309, 0.002892135176807642, 0.0027411803603172302, 0.002902589738368988, 0.0025426179636269808, 0.0031511469278484583, 0.003065997501835227, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 2373, 2199, -2338, -5356, -599, 787, -1291, -1262, 57, -2239, 10505, -1621, -695, 12628, 8949, -5775, 12820, 104, -5218, 89, -594, -3300, 1091, -3202, 990, -3960, -1281, -4409, 1235, -9074, -158, 163, 10279, 1306, -705, -482, -521, -1578, -1163, 8974, 284, -202, 2054, -6158, 13549, 13825, 567, 14810, -1844, 12917, 14828, -3590, -791, 241, -12, 8607, -1065, -1309, 13971, 6461, 8696, 13706, 8895, -6180, 1759, 2503, -2787, 2192, -3101, -1663, 1428, 1172, 15325, -908, -815, 9441, -1019, -2245, 5739, 933, -178, 16909, 513, 2046, 17843, 322, -5846, -3095, 1627, -5402, 13177, 167, -3865, 795, -5952, -3969, };
const TfArray<96, float> quant10_scale = { 96, { 0.00037068419624119997, 0.00017817785555962473, 0.00014180826838128269, 0.00014483449922408909, 0.00027871230849996209, 0.00030510633951053023, 0.00034885405329987407, 0.0002425748243695125, 0.00020269157539587468, 0.00021500419825315475, 9.7890209872275591e-05, 0.00043844283209182322, 0.00030789247830398381, 0.00010190695320488885, 0.00013045321975369006, 0.00012334952771198004, 0.00011181338777532801, 0.00028227522852830589, 0.00017421116353943944, 0.00012562773190438747, 0.0002403951802989468, 0.00027952552773058414, 0.0001944723044289276, 0.0001762435567798093, 0.00052374810911715031, 0.00018614990403875709, 0.00031975537422113121, 0.00012071936362190172, 0.00021003557776566595, 6.7300352384336293e-05, 0.00044120242819190025, 0.00021220104827079922, 0.00017547572497278452, 0.00024527107598260045, 0.00032859286875464022, 0.00022706859454046935, 0.00021907157497480512, 0.00029090276802890003, 0.00032920815283432603, 0.00011358059418853372, 0.00021117317373864353, 0.00028691801708191633, 0.00023516947112511843, 0.00011194811668246984, 8.8596221758052707e-05, 9.0492692834232002e-05, 0.00018780752725433558, 0.00011230170639464632, 0.00026368157705292106, 7.054530578898266e-05, 0.00010308660421287641, 0.00012643489753827453, 0.00012347372830845416, 0.00016765136388130486, 0.0002309700648766011, 0.00016949497512541711, 0.00025979758356697857, 0.00022788284695707262, 0.0001772573305061087, 0.00012417959806043655, 0.00015048999921418726, 0.00014366567484103143, 0.00013054149167146534, 0.00011217640712857246, 0.00022133771562948823, 0.00020740959735121578, 0.00020613295782823116, 0.00024496825062669814, 0.00027602925547398627, 0.00023450529261026531, 0.00025444079074077308, 0.0001375428109895438, 0.00010080431820824742, 0.00032261884189210832, 0.00041987528675235808, 0.00011961319978581741, 0.00016103836242109537, 0.00022397606517188251, 0.00018393216305412352, 0.00021612724231090397, 0.00037040445022284985, 8.2599894085433334e-05, 0.00025836366694420576, 0.00017932563787326217, 6.8806773924734443e-05, 0.00019861021428368986, 0.00013606385618913919, 0.0002488577738404274, 0.00027193469577468932, 0.00021049956558272243, 9.3741778982803226e-05, 0.00047712208470329642, 0.00021120189921930432, 0.00034199949004687369, 0.00010500011558178812, 0.00032839429331943393, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 15,109,-2,27,-26,14,36,38,59,-71,-56,32,-9,-16,19,-46,-113,22,36,17,34,74,66,122,6,-7,-42,5,-7,16,25,-27,-48,-5,-35,94,-2,33,12,-19,28,-43,-7,24,-102,-35,9,-25,-7,-77,-44,-2,51,56,-42,-15,-57,-56,-55,-127,-127,3,-100,2,-31,44,35,-17,-12,36,34,-7,-53,18,43,9,3,-27,-58,13,0,-78,59,-29,-105,-45,8,1,-127,19,-85,34,81,-14,83,9, -42,-43,-1,79,-3,98,-16,-3,60,29,-127,48,-29,-66,-79,127,-127,68,58,76,101,18,99,127,22,29,17,63,12,127,-12,-127,41,74,7,59,64,102,-16,-127,127,-16,85,127,-65,-85,127,-45,-15,-84,-111,-31,26,127,-26,-127,24,27,-98,-67,-39,-118,-41,85,-38,91,127,-19,3,127,127,6,-92,26,-38,-96,26,-42,-4,127,-3,-40,127,-57,-127,-56,85,33,79,112,-76,5,127,-39,127,33, 10,-119,7,17,-15,-4,-11,39,34,62,-49,17,0,42,3,-80,-46,22,20,5,28,58,55,116,6,-27,28,45,11,18,-1,-63,-43,-80,-37,58,1,-1,23,-7,-5,32,-18,23,-36,-17,-2,3,28,-54,-6,9,40,-16,3,-8,53,-66,-20,-73,-93,19,-74,-7,36,17,-69,-8,-13,-13,9,15,-34,-25,-8,22,10,4,-63,-9,2,-91,33,-14,-33,-29,9,-18,-97,2,-18,28,39,34,48,-3, 
  /* [0][1][][] */ 74,-21,61,122,2,-48,127,44,-40,-127,-105,127,1,-126,-61,38,-55,-54,92,23,-116,6,-127,-54,-33,54,-127,127,-98,92,127,59,12,52,4,127,-127,57,-12,-80,50,-127,14,85,-127,-69,-1,-127,-104,-124,-127,16,127,-73,89,-10,-127,9,-71,-2,-71,-80,-38,49,-99,-29,125,-92,-44,26,-46,-127,-127,66,127,-78,107,78,-93,-53,127,-127,-36,98,-46,-4,22,87,-9,23,-66,20,7,-97,104,-2, -127,-7,-80,127,-84,-127,-105,-127,61,8,-37,38,-79,-127,-60,124,-104,-127,127,127,43,-127,-101,113,-127,127,14,77,-93,-29,-117,62,-127,74,127,-27,32,127,127,-115,-45,28,14,87,-51,-127,-84,-94,5,-127,-95,127,15,73,73,-68,32,24,91,-24,-33,-32,-127,127,-5,-127,119,127,23,63,-99,-89,-24,50,-111,-127,127,127,119,-40,-77,4,-108,69,-92,-89,127,127,120,127,-127,-127,-103,-61,90,127, 38,-23,108,83,-3,-20,18,38,-52,110,-84,69,9,-23,-127,80,33,-39,25,-4,-127,15,-74,-62,-25,24,126,-15,127,116,28,-105,-32,-127,-17,122,-116,11,-25,-60,-13,103,17,91,1,-39,-13,-85,127,-106,-95,-6,60,-99,-127,30,99,6,-127,64,-41,-53,-12,40,127,-49,-12,-13,-51,5,-45,-53,-117,-127,-8,-39,10,-4,-127,-50,-68,-120,-32,127,-106,18,18,8,-33,-14,-18,33,2,127,34,-5, 
  /* [0][2][][] */ 22,-127,36,-11,12,21,28,49,-46,-38,-21,-27,16,-31,4,55,5,31,-8,41,12,53,-1,-24,6,39,-8,5,-45,31,-5,22,-11,-30,-33,23,56,-9,1,-34,-4,33,-22,-28,-26,-43,-19,-28,-8,-4,-17,41,-11,0,-45,-6,-7,8,-11,33,-48,-24,28,-9,-42,34,-64,-27,21,-10,13,94,-50,25,29,7,-33,-25,7,-18,13,-38,-14,-43,-80,38,-8,4,-77,39,2,21,1,-5,11,-6, -55,-7,127,-1,127,78,-28,21,-127,17,-121,-42,127,-46,-56,38,43,71,-11,-40,46,19,39,-4,45,-64,-3,39,-24,120,-21,11,-49,20,11,-11,75,39,24,-81,-23,-1,-127,20,-13,-28,-46,-67,2,-87,-49,81,86,-70,-37,-70,-28,127,-34,14,42,-127,62,59,-43,14,-70,18,127,-17,10,99,-106,20,-12,-64,-8,-60,-12,-36,-6,-87,-34,-69,-57,127,40,15,103,36,27,24,-25,-9,3,4, 0,70,37,-17,3,-6,-11,46,1,67,-8,6,1,-24,-3,56,-8,22,-8,31,-6,47,1,-29,-6,35,23,27,-3,41,-17,-65,-36,-31,-22,-1,47,-29,0,-12,-4,-4,-1,-4,-25,-40,-24,-18,23,-1,-14,26,-3,-11,11,18,4,17,-2,66,-55,-2,10,-17,19,2,-94,3,14,-9,7,89,13,-9,-3,2,-10,-2,7,-13,-9,-66,-13,-16,-48,30,-11,-5,-67,48,9,20,1,8,-8,-7, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.015754077583551407, 0.0075725587084889412, 0.0060268514789640903, 0.0061554661951959133, 0.011845272965729237, 0.012967019341886044, 0.014826296828687191, 0.010309429839253426, 0.0086143920198082924, 0.0091376779600977898, 0.0041603338904678822, 0.018633820116519928, 0.013085430487990379, 0.0043310453183948994, 0.0055442620068788528, 0.0052423547022044659, 0.004752068780362606, 0.011996696703135967, 0.0074039744213223457, 0.0053391782566905022, 0.010216794908046722, 0.011879835277795792, 0.0082650724798440933, 0.0074903508648276329, 0.022259294986724854, 0.0079113710671663284, 0.013589602895081043, 0.0051305727101862431, 0.0089265117421746254, 0.002860264852643013, 0.018751103430986404, 0.0090185441076755524, 0.0074577182531356812, 0.010424020700156689, 0.013965196907520294, 0.0096504148095846176, 0.0093105416744947433, 0.012363367713987827, 0.013991346582770348, 0.0048271752893924713, 0.0089748594909906387, 0.012194016017019749, 0.0099947024136781693, 0.0047577950172126293, 0.0037653392646461725, 0.0038459394127130508, 0.0079818200320005417, 0.0047728223726153374, 0.01120646670460701, 0.0029981755651533604, 0.0043811807408928871, 0.005373483058065176, 0.0052476334385573864, 0.0071251825429499149, 0.0098162274807691574, 0.0072035361081361771, 0.011041397228837013, 0.0096850208938121796, 0.0075334361754357815, 0.0052776327356696129, 0.0063958247192203999, 0.0061057908460497856, 0.005548013374209404, 0.0047674970701336861, 0.0094068525359034538, 0.0088149076327681541, 0.0087606506422162056, 0.010411150753498077, 0.011731243692338467, 0.0099664749577641487, 0.01081373356282711, 0.0058455690741539001, 0.004284183494746685, 0.013711300678551197, 0.017844699323177338, 0.0050835609436035156, 0.0068441303446888924, 0.0095189828425645828, 0.0078171165660023689, 0.0091854073107242584, 0.015742188319563866, 0.0035104954149574041, 0.010980456136167049, 0.0076213395223021507, 0.0029242876917123795, 0.0084409341216087341, 0.0057827136479318142, 0.010576454922556877, 0.011557224206626415, 0.0089462315663695335, 0.0039840256795287132, 0.020277688279747963, 0.0089760804548859596, 0.014534978196024895, 0.0044625047594308853, 0.013956757262349129, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 6268, 3419, 576, -1074, 5473, 9121, 6259, 1869, -89, 11409, 988, -3538, 2968, 3267, 404, -361, 3224, 8883, -632, 97, 3768, 12870, 7980, -1874, -3713, -655, 14116, 3, 1724, 1410, 7508, -1571, 8793, 2019, 5259, -3896, 847, -4847, 133, 1940, 2278, 1245, 1791, -313, 649, 2737, 4479, 3714, 4038, 3086, 7316, 2061, -2131, 2262, 710, 2064, 1633, 2106, 6725, 1241, -743, 5706, 3491, 3751, 3620, 6382, -3812, 1998, 5107, -664, 5669, 1205, 3491, 3606, 4269, 1795, -658, 1320, 2069, 2454, 2982, 3066, 7233, 857, 1874, 5242, 662, -919, 15639, -420, 482, -1489, 10002, 3533, 57, -1066, };
const TfArray<96, float> quant12_scale = { 96, { 0.00011887029540957883, 0.00011213887046324089, 0.00017756108718458563, 0.0001807649532565847, 0.0001255122188013047, 8.6842257587704808e-05, 0.00013412810221780092, 0.00015053787501528859, 0.00013342985766939819, 6.7850334744434804e-05, 0.00018351773906033486, 0.00013681655400432646, 0.00017437954375054687, 0.00014826613187324256, 0.00021003508300054818, 0.0001707713381620124, 0.00018426186579745263, 8.5574654804076999e-05, 0.00011626842751866207, 0.0001888703991426155, 0.00015655758033972234, 7.3443399742245674e-05, 0.00010494445450603962, 0.00014636745618190616, 0.00015751115279272199, 0.00018668848497327417, 6.3294188294094056e-05, 0.00018512824317440391, 0.00015674554742872715, 0.00015885409084148705, 0.00010635564831318334, 0.00017471206956543028, 9.1654881543945521e-05, 0.00023407279513776302, 0.00013327604392543435, 0.00013882972416467965, 0.00016857318405527622, 0.00012382367276586592, 0.00014097033999860287, 0.00017260551976505667, 0.00018946739146485925, 0.00018313353939447552, 0.00018998426094185561, 0.00030366893042810261, 0.00036001313128508627, 0.00015096001152414829, 0.00012811344640795141, 0.00016755569959059358, 0.00013976090122014284, 0.000162552620167844, 0.00010249915067106485, 0.00020628153288271278, 0.00016607889847364277, 0.00015587903908453882, 0.0002870161843020469, 0.00019899199833162129, 0.0002081304119201377, 0.00017595529789105058, 0.00012227852130308747, 0.000182959163794294, 0.00026816996978595853, 0.00012598490866366774, 0.00015364013961516321, 0.00014538981486111879, 0.00016060512280091643, 0.0001199302714667283, 0.00014268295490182936, 0.00021281759836710989, 0.0001087094351532869, 0.00021828027092851698, 0.00012701746891252697, 0.00016248304746113718, 0.00013080706412438303, 0.00011901896505150944, 0.00012442463776096702, 0.00014019534864928573, 0.0001632132480153814, 0.00024136705906130373, 0.00014765093510504812, 0.00021504197502508759, 0.00014534438378177583, 0.00013415231660474092, 0.00011126493336632848, 0.00015050705405883491, 0.00016399625746998936, 0.00013210083125159144, 0.00020164898887742311, 0.00024385977303609252, 6.0686561482725665e-05, 0.00023475964553654194, 0.00025370685034431517, 0.00015042156155686826, 8.623387839179486e-05, 0.00011481680849101394, 0.00016455196600873023, 0.00010536993795540184, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -46,55,-13,-28,-28,-56,-69,-26,59,-40,42,-53,93,-112,16,-127, 
  /* [1][0][][] */ -103,61,-104,-111,-89,31,-13,60,-39,3,93,-55,53,127,23,51, 
  /* [2][0][][] */ -37,-6,-78,2,-42,-63,28,-38,-123,124,105,21,34,73,-51,127, 
  /* [3][0][][] */ -56,-59,4,-43,-75,12,-52,-127,-9,13,43,-77,-64,-42,-124,-45, 
  /* [4][0][][] */ 79,6,-14,40,-56,-17,-127,35,18,73,9,50,16,11,-44,-84, 
  /* [5][0][][] */ -88,61,-79,-28,48,-55,-33,-74,105,-34,20,-45,11,-127,-102,-107, 
  /* [6][0][][] */ -17,-24,-31,7,-77,61,36,-28,-30,-48,127,-15,-1,8,-110,15, 
  /* [7][0][][] */ -35,124,127,-67,70,88,5,-57,54,73,-89,-31,58,2,11,82, 
  /* [8][0][][] */ -40,7,50,-33,66,-7,123,127,-79,-31,-97,-104,74,104,-73,-56, 
  /* [9][0][][] */ 38,50,100,32,-114,-38,-109,-120,72,16,127,35,-47,-102,60,-27, 
  /* [10][0][][] */ -40,-127,-4,-81,-122,69,29,44,-28,-50,-2,43,-23,67,-122,37, 
  /* [11][0][][] */ 93,-64,-26,83,-115,-40,56,-12,127,115,-50,48,28,-76,-34,121, 
  /* [12][0][][] */ -54,-53,127,-22,70,-19,16,40,72,-29,85,70,-19,17,-94,28, 
  /* [13][0][][] */ -2,-41,26,20,7,9,127,37,-97,12,8,18,-25,108,102,-82, 
  /* [14][0][][] */ 127,-70,119,17,74,52,95,65,65,57,57,28,48,-41,57,-36, 
  /* [15][0][][] */ -4,123,2,-41,20,125,-64,80,-47,-21,-31,-15,-55,127,-32,-44, 
  /* [16][0][][] */ -48,70,113,-59,28,78,5,-13,-10,8,-29,45,96,5,79,127, 
  /* [17][0][][] */ 18,122,98,-115,12,-46,18,-79,-82,88,-16,50,-63,-29,127,-67, 
  /* [18][0][][] */ -100,2,-71,-116,121,79,-32,-77,41,61,127,61,14,112,-60,3, 
  /* [19][0][][] */ 47,127,83,72,54,-22,-12,-3,-34,106,44,100,59,64,-51,43, 
  /* [20][0][][] */ 84,4,10,58,-54,0,-28,37,-23,-38,-127,-37,88,-54,25,-20, 
  /* [21][0][][] */ -76,-62,-17,107,-32,-4,-127,61,-4,4,28,23,-35,29,-61,6, 
  /* [22][0][][] */ -6,-1,-51,-46,127,2,-27,39,53,61,26,47,-5,23,-8,23, 
  /* [23][0][][] */ -93,11,-19,7,20,60,106,93,-12,127,-22,-31,-13,33,-68,-37, 
  /* [24][0][][] */ 28,-80,41,5,127,38,89,-34,48,22,58,33,-68,41,4,-7, 
  /* [25][0][][] */ 127,-64,78,15,9,-4,-24,105,124,-22,-46,4,126,-50,93,68, 
  /* [26][0][][] */ 57,43,107,88,72,-15,-76,-16,-9,62,12,127,38,-65,26,-74, 
  /* [27][0][][] */ -68,23,-63,9,-9,114,20,-93,42,-86,127,11,43,-31,117,98, 
  /* [28][0][][] */ -42,39,-74,-127,23,-83,11,-58,-95,98,-63,33,-25,31,-23,74, 
  /* [29][0][][] */ 91,105,-83,45,23,85,-46,-18,38,48,12,67,-127,21,-27,83, 
  /* [30][0][][] */ -40,75,-98,-64,53,-40,23,21,-57,40,-46,-5,13,59,-14,127, 
  /* [31][0][][] */ 23,-127,88,47,64,-76,-81,37,-18,2,16,-39,-80,53,43,126, 
  /* [32][0][][] */ -53,88,9,44,-124,57,16,49,21,-127,35,-85,46,45,37,69, 
  /* [33][0][][] */ -81,-10,68,103,-4,18,-54,8,-44,-53,3,-21,-6,-11,8,127, 
  /* [34][0][][] */ -24,12,-102,-87,58,-5,-9,76,17,-8,7,-11,-67,-21,-39,127, 
  /* [35][0][][] */ 91,4,26,-1,-22,14,-77,-22,-30,-127,-47,8,-10,-34,54,-19, 
  /* [36][0][][] */ -12,19,-117,-15,30,127,-9,43,-24,20,63,22,14,27,-87,50, 
  /* [37][0][][] */ 60,33,64,-52,71,-127,41,-19,-123,62,-91,-26,15,29,103,41, 
  /* [38][0][][] */ -50,127,27,-49,39,17,70,-84,12,-1,-101,38,-53,-97,-87,23, 
  /* [39][0][][] */ 81,27,-127,-112,-9,-21,16,-69,4,-23,-8,-32,63,-3,-107,-83, 
  /* [40][0][][] */ -40,19,-66,-92,-39,-18,12,-127,-1,-6,-4,-31,50,71,30,57, 
  /* [41][0][][] */ -32,-87,-11,127,-1,-20,-59,-19,-8,-55,66,-58,-73,-15,9,28, 
  /* [42][0][][] */ -18,64,-17,-127,12,12,8,-29,45,-1,-44,18,68,-17,-17,14, 
  /* [43][0][][] */ -5,23,-4,15,127,26,20,18,26,30,-11,-62,-91,-39,-17,-22, 
  /* [44][0][][] */ 86,-15,21,45,-28,-7,8,36,32,-41,35,5,127,1,-53,-24, 
  /* [45][0][][] */ 11,-82,-67,26,-53,-80,12,49,26,-15,16,26,-85,127,34,-24, 
  /* [46][0][][] */ -7,-84,54,84,-9,-1,-118,52,18,-65,63,-20,25,75,88,127, 
  /* [47][0][][] */ -38,-62,20,79,14,0,55,21,12,-70,-127,-38,44,-36,-57,17, 
  /* [48][0][][] */ -75,91,-18,-28,1,66,4,-127,25,-31,46,-46,41,-117,-54,7, 
  /* [49][0][][] */ -64,0,40,-34,5,15,112,127,-24,-28,-8,28,-53,30,-39,24, 
  /* [50][0][][] */ 60,26,-91,44,26,-127,-58,2,-93,42,-35,1,20,-85,-124,-69, 
  /* [51][0][][] */ -56,56,-17,116,-27,44,-57,-93,-40,-85,-7,-61,20,28,-13,127, 
  /* [52][0][][] */ -127,20,24,-17,25,39,64,4,7,-78,-36,-39,-92,-46,-124,-5, 
  /* [53][0][][] */ -39,-71,-38,-127,-36,-12,16,71,43,-63,-50,15,-20,28,60,97, 
  /* [54][0][][] */ -1,-55,-10,0,-54,65,47,-20,-4,-80,44,26,-20,-22,-127,30, 
  /* [55][0][][] */ -10,-25,-33,29,53,-30,58,75,-60,-56,-127,-33,64,-33,-25,34, 
  /* [56][0][][] */ 76,-33,-56,-23,-127,27,-105,-4,-8,-21,-30,17,86,-37,60,18, 
  /* [57][0][][] */ -46,14,19,-43,127,34,43,26,-27,44,-11,1,-38,69,-95,-23, 
  /* [58][0][][] */ 20,0,1,-9,47,-3,-48,-54,55,-127,-60,-2,-78,-55,-27,52, 
  /* [59][0][][] */ -63,-38,8,11,3,63,-98,-40,79,127,-75,14,-34,-8,-7,-6, 
  /* [60][0][][] */ 25,-44,-1,8,-127,-41,34,7,-13,33,-18,43,8,-31,38,31, 
  /* [61][0][][] */ 28,38,-87,-6,-56,-27,-127,-75,-37,8,48,111,67,-52,100,56, 
  /* [62][0][][] */ 43,-35,42,-20,-9,42,36,127,-50,117,9,83,33,46,79,97, 
  /* [63][0][][] */ 14,-127,-3,-19,-59,18,46,-30,-1,-16,-1,-11,-30,125,110,31, 
  /* [64][0][][] */ -12,0,-127,-36,12,50,32,-11,-14,-100,53,0,61,-29,-62,99, 
  /* [65][0][][] */ -10,1,69,45,75,-18,70,71,-44,8,-127,-68,47,102,-61,-18, 
  /* [66][0][][] */ -26,-116,-13,-100,-75,-127,44,-40,-12,-48,14,82,-63,-40,-71,70, 
  /* [67][0][][] */ -26,-85,-82,-13,-73,114,-6,-127,-68,-33,-40,-96,2,-25,-67,31, 
  /* [68][0][][] */ 127,32,17,-17,-84,11,-57,-56,-71,-108,-29,-5,19,-29,64,-69, 
  /* [69][0][][] */ 54,3,58,-11,-15,-48,-62,38,-16,127,-16,0,-11,26,80,-23, 
  /* [70][0][][] */ 29,-10,-25,70,-107,34,-9,-102,86,127,22,59,63,-49,-16,21, 
  /* [71][0][][] */ 116,-75,81,118,-72,-37,31,-9,127,2,-42,30,71,-74,24,22, 
  /* [72][0][][] */ -1,-39,66,113,81,-5,-127,85,97,-23,46,3,-53,-88,-78,101, 
  /* [73][0][][] */ 91,29,80,-127,67,-107,-90,58,-35,124,-47,6,14,-100,46,-78, 
  /* [74][0][][] */ 96,19,43,34,-127,-36,30,-4,-89,-39,9,-33,39,-66,10,13, 
  /* [75][0][][] */ 92,127,-96,26,53,53,-27,-29,-21,-28,46,76,-115,46,62,77, 
  /* [76][0][][] */ -84,-37,-9,-59,-73,-12,116,0,-78,21,117,53,-59,-127,-28,108, 
  /* [77][0][][] */ -45,127,-34,16,-43,-62,41,71,51,-51,-15,71,-28,43,-11,70, 
  /* [78][0][][] */ 107,22,-60,44,-57,32,-114,-35,13,-31,-82,6,17,-127,31,61, 
  /* [79][0][][] */ -68,-36,114,32,-14,-101,-29,-60,-19,10,-1,14,-52,127,-61,80, 
  /* [80][0][][] */ 58,103,17,-127,-19,34,107,-32,20,25,-35,23,76,-53,4,5, 
  /* [81][0][][] */ 31,-69,9,-110,127,37,-5,125,119,21,-16,-50,-31,18,-84,-63, 
  /* [82][0][][] */ 81,53,74,-9,127,-96,29,32,-4,104,-40,22,6,-42,35,-104, 
  /* [83][0][][] */ -32,102,-10,11,67,64,127,110,-23,34,-11,-49,-100,108,-55,-94, 
  /* [84][0][][] */ 6,-88,-1,127,13,-94,-75,24,-73,44,-63,-24,-119,45,11,-43, 
  /* [85][0][][] */ -104,73,-42,-6,-8,-57,-52,-44,-15,41,20,-78,-127,-93,-75,46, 
  /* [86][0][][] */ -21,59,98,116,47,-27,61,25,8,23,-51,-83,37,76,-127,-69, 
  /* [87][0][][] */ -18,50,127,-32,-109,-31,26,10,35,-22,7,45,-49,23,-6,-4, 
  /* [88][0][][] */ -19,-72,-113,22,41,36,-5,12,-11,-77,-114,-101,127,-17,12,45, 
  /* [89][0][][] */ 29,27,25,-121,7,-59,-53,54,127,-1,28,-97,9,-37,51,-67, 
  /* [90][0][][] */ -12,69,20,3,-40,39,38,127,6,-53,-12,122,50,18,-49,77, 
  /* [91][0][][] */ -48,2,-16,64,77,64,-51,-122,-52,47,-14,34,-105,-127,-53,-26, 
  /* [92][0][][] */ -49,81,-6,-27,-127,5,-73,59,-55,84,99,84,15,-13,45,19, 
  /* [93][0][][] */ 117,47,101,49,-127,-83,3,26,-29,-56,-24,-73,34,-50,-16,-15, 
  /* [94][0][][] */ -50,-127,19,-114,6,34,-15,10,68,-17,12,53,17,71,-46,61, 
  /* [95][0][][] */ -31,-82,-34,-51,127,124,-53,38,107,56,-94,80,-52,124,-75,25, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.001606541802175343, 0.0015155660221353173, 0.0023997526150196791, 0.0024430532939732075, 0.0016963079106062651, 0.001173680298961699, 0.0018127523362636566, 0.0020345316734164953, 0.0018033155938610435, 0.00091700284974649549, 0.0024802573025226593, 0.0018490870716050267, 0.0023567539174109697, 0.0020038289949297905, 0.0028386414051055908, 0.002307988703250885, 0.0024903141893446445, 0.0011565485037863255, 0.0015713773900642991, 0.0025525989476591349, 0.0021158885210752487, 0.00099259358830749989, 0.0014183329185470939, 0.0019781682640314102, 0.0021287761628627777, 0.0025231102481484413, 0.0008554261876270175, 0.0025020234752446413, 0.0021184289362281561, 0.0021469260100275278, 0.0014374053571373224, 0.0023612480144947767, 0.0012387232854962349, 0.0031635130289942026, 0.0018012366490438581, 0.0018762950785458088, 0.0022782804444432259, 0.0016734871314838529, 0.001905225683003664, 0.0023327777162194252, 0.0025606674607843161, 0.0024750649463385344, 0.0025676528457552195, 0.004104110412299633, 0.0048656072467565536, 0.0020402369555085897, 0.0017314638243988156, 0.002264529000967741, 0.0018888800404965878, 0.0021969119552522898, 0.0013852844713255763, 0.0027879117988049984, 0.0022445700597018003, 0.0021067180205136538, 0.0038790474645793438, 0.0026893932372331619, 0.002812899649143219, 0.0023780502378940582, 0.0016526043182238936, 0.0024727082345634699, 0.0036243393551558256, 0.0017026964342221618, 0.0020764591172337532, 0.0019649553578346968, 0.0021705913823097944, 0.0016208675224334002, 0.0019283719593659043, 0.0028762472793459892, 0.0014692170079797506, 0.0029500757809728384, 0.0017166514880955219, 0.0021959717851132154, 0.0017678681761026382, 0.0016085511306300759, 0.0016816091956570745, 0.0018947516800835729, 0.0022058405447751284, 0.0032620956189930439, 0.0019955146126449108, 0.0029063099063932896, 0.0019643413834273815, 0.0018130795797333121, 0.0015037547564134002, 0.0020341151393949986, 0.0022164229303598404, 0.0017853535246104002, 0.0027253027074038982, 0.0032957848161458969, 0.00082018389366567135, 0.0031727959867566824, 0.0034288689494132996, 0.002032959833741188, 0.0011654580011963844, 0.0015517586143687367, 0.0022239333484321833, 0.0014240833697840571, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -26474, -3250, 3885, -10682, 11777, -14002, 22873, -6533, 11379, -8717, 13186, 12399, -3187, -30525, -395, 6358, };
const TfArray<16, float> quant14_scale = { 16, { 9.3722192104905844e-05, 6.0952013882342726e-05, 6.1937891587149352e-05, 6.3706786022521555e-05, 0.00010890328849200159, 0.0001268890337087214, 6.4538457081653178e-05, 5.9870999393751845e-05, 9.327389852842316e-05, 0.00010166876018047333, 0.00010306944022886455, 8.3260318206157535e-05, 6.8493158323690295e-05, 0.00011514659854583442, 5.8227098634233698e-05, 7.9170669778250158e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 13,29,13,4,-19,-77,-14,-9,-17,-73,5,-5,50,-68,57,33,-83,-34,39,10,73,20,-58,13,1,61,127,63,7,84,54,-34,9,-5,10,-21,35,34,-5,-9,119,9,23,-22,-14,-6,-2,-46,26,-32,103,-3,-65,-4,44,31,-5,-47,12,21,-10,35,-59,-10,15,0,66,22,3,-19,20,27,4,36,9,28,67,-33,46,24,-4,42,34,33,-53,5,-4,67,19,6,-81,-24,24,21,98,70, 
  /* [1][0][][] */ 18,42,-60,-18,6,-50,110,-110,-68,-36,-75,-47,6,-60,-14,-56,-29,-18,-36,-15,-11,-85,121,-22,-6,34,6,72,-45,8,-29,11,-39,26,15,3,-29,45,-67,97,21,1,10,-59,65,-58,-21,37,-80,4,39,-102,-45,42,68,60,35,14,-60,10,-45,3,-18,-28,25,22,111,9,-33,-127,4,23,20,65,-28,33,-59,-33,103,-37,43,-14,65,-66,-39,-71,-24,9,-17,-51,37,5,79,-70,-30,48, 
  /* [2][0][][] */ -6,-11,13,-5,68,45,-47,19,-50,32,4,-23,33,-11,15,27,21,-34,-127,-7,-23,-32,-18,34,0,-16,-39,20,-38,-23,-14,67,-16,-37,3,24,-39,31,-19,-21,62,11,13,30,5,58,2,-13,-88,8,-12,18,-23,42,18,-57,33,15,42,26,-22,-4,-18,50,27,-3,-31,3,-1,4,-13,-31,23,47,26,68,-55,-16,-25,-40,32,35,44,-13,-18,-48,-9,-48,-20,-34,-18,64,3,-2,82,-48, 
  /* [3][0][][] */ 36,-43,-23,-113,-9,-30,109,-33,22,127,-81,-15,13,-21,-17,62,53,34,-27,21,-63,20,23,-2,-43,75,50,-10,-52,-13,-74,64,1,-27,34,-20,1,-49,-22,59,2,14,-13,26,56,-48,-10,22,50,-23,32,-36,109,40,39,-1,6,-29,-16,-53,-45,38,68,-7,-41,-31,118,-45,-26,-10,-53,29,19,-72,6,-74,15,-51,126,-1,-5,-63,-37,-61,-30,-51,76,79,-38,44,-57,-10,5,-92,-28,36, 
  /* [4][0][][] */ -28,66,38,5,-19,15,-40,2,9,-42,8,-21,17,52,-12,15,-15,-43,-23,-75,30,-32,-69,14,-22,-50,-26,12,-42,127,-53,-13,7,-34,8,-26,62,54,-25,2,30,14,23,-37,-48,-2,55,-27,11,-14,-45,-2,-62,18,54,23,-2,65,-22,24,-36,-68,-24,12,58,26,-65,-16,3,0,7,-70,-9,62,60,64,-36,14,-58,35,19,65,26,-67,56,-67,-17,-66,-42,-47,-54,-19,-1,22,28,-17, 
  /* [5][0][][] */ 2,-17,40,-23,-14,-16,-17,23,32,12,-9,-6,-24,-13,32,-18,-12,5,-53,-36,-17,7,-21,4,22,-51,59,-19,-5,43,4,80,-14,-76,22,7,-35,-25,-24,-5,-43,5,-24,11,5,20,-64,21,-18,17,50,-13,25,-77,2,14,-22,-49,5,-31,38,20,22,51,-34,8,104,-27,-13,-26,14,11,-2,28,37,12,-8,-10,127,42,-24,-9,-32,28,50,58,9,90,-1,-32,-4,8,9,-7,-29,29, 
  /* [6][0][][] */ 22,-59,66,23,-36,118,-47,-106,-13,-73,-83,69,12,10,-39,87,6,35,19,-31,-88,-20,-85,-51,7,-32,-12,84,-107,38,-16,-32,31,85,-23,-6,-13,-49,21,-26,-74,37,37,-35,23,51,-99,-11,58,10,-104,-127,74,17,-45,-17,22,-20,28,-23,-2,-47,28,-9,41,-82,-69,-44,-97,11,-9,-80,-24,-91,22,-94,85,13,-77,46,-38,80,32,-78,56,-37,-30,-4,-75,71,-81,87,38,-54,80,-104, 
  /* [7][0][][] */ -15,-18,-56,65,-25,9,39,-3,-97,-6,85,54,-2,-57,1,-36,-10,-5,0,4,-52,-17,-39,-28,65,48,-2,74,-2,21,23,27,-55,-127,24,93,-14,10,-41,4,-12,-14,11,-73,30,48,60,74,-18,44,-50,-1,24,-39,36,-47,-21,34,-78,-20,57,2,10,-31,57,-56,100,-7,-58,-27,69,5,-12,-25,-76,-26,30,-40,88,-34,-4,-11,-72,-29,37,26,-80,47,-19,24,1,25,57,-4,84,-12, 
  /* [8][0][][] */ -4,-58,15,10,-12,-6,19,13,-17,-12,48,41,14,42,-38,-10,63,2,13,-5,-13,-76,-42,-26,-24,-46,66,-2,-21,51,-1,-29,-17,-2,0,4,-43,-14,25,-31,7,48,32,-42,13,-12,35,-15,28,-2,52,2,-4,7,-32,5,-19,119,-70,-4,-20,-58,-59,2,-82,-35,-21,13,-12,9,32,-27,-23,-127,46,-103,6,14,-55,15,-31,-9,-3,56,75,-58,-36,53,-39,90,12,-25,-55,8,-2,-55, 
  /* [9][0][][] */ -27,-27,-29,17,-1,16,8,29,-33,-4,53,54,-27,46,23,-48,-12,31,-24,-30,3,45,-6,14,-20,31,7,19,34,-12,19,-1,-15,-19,5,58,-25,-6,26,4,-14,-31,16,-6,15,52,-10,37,-43,16,-21,35,127,18,-1,-3,10,-22,42,16,-24,1,78,8,12,26,64,7,37,-2,-19,32,4,-127,-39,-122,-32,-11,37,-4,-1,23,5,-41,32,5,-58,-7,-3,107,35,33,57,32,-9,25, 
  /* [10][0][][] */ 23,42,7,3,-20,13,-42,-36,74,5,-41,23,21,-2,-16,-54,-33,5,19,4,28,-12,-19,-31,9,-11,-92,49,-16,45,3,10,24,25,-23,-3,13,-6,-4,5,37,-13,51,-40,-28,-5,14,33,21,4,7,-25,-23,-12,-5,30,-12,5,-7,-7,-7,-40,-7,7,-1,-14,-89,-28,-53,-18,46,-13,-22,30,29,17,54,-19,-91,10,-16,32,1,-3,-4,8,-79,-127,-19,24,7,29,55,-44,19,23, 
  /* [11][0][][] */ 19,-38,2,4,-58,27,21,-5,85,-23,-30,-47,22,1,10,-4,-21,62,20,-61,18,32,20,-18,41,23,65,9,38,-60,-25,21,13,107,-111,-2,17,-27,53,13,-68,42,-18,8,-41,-3,-21,0,57,-18,-42,-20,-24,19,-86,92,-30,-11,8,-36,36,-2,-14,-70,-9,-45,-127,-79,-1,-33,-90,35,49,20,-13,-2,42,60,-118,-38,-14,-3,-15,0,-30,-11,52,82,15,-54,9,12,-31,28,92,30, 
  /* [12][0][][] */ 12,35,-42,-24,22,-27,11,21,60,-37,14,0,2,-27,-8,14,14,-45,-21,17,11,59,10,64,-43,-24,-127,-1,76,-28,36,-5,-21,-83,66,-10,32,-19,-12,18,-23,-62,13,31,45,-5,18,-17,-67,-3,-61,95,74,-14,23,-81,12,13,-36,-38,20,50,75,-3,-23,-17,31,35,117,30,28,29,5,-17,-18,-7,-34,-55,43,-68,21,-48,34,-32,-7,1,-2,-106,-8,33,-43,22,20,69,19,35, 
  /* [13][0][][] */ -19,18,-69,23,22,21,-13,3,32,65,-26,40,-46,-31,59,-39,14,48,62,20,-31,-41,-3,24,43,50,-12,32,7,33,58,-18,-10,60,-9,39,17,-36,-51,-46,5,-19,13,15,52,47,-38,43,-43,38,-10,0,-21,-35,58,36,2,-38,-10,-9,28,11,1,-26,13,85,127,42,19,-3,-44,-13,37,55,-79,49,31,-70,123,-33,-11,-31,29,11,19,69,-30,-17,-14,-21,10,49,40,16,58,49, 
  /* [14][0][][] */ -25,52,19,8,-73,-53,19,58,-75,-30,80,13,-100,-5,93,-18,-46,36,-66,32,-26,18,-99,20,-44,-10,-60,-122,4,8,29,94,-64,30,21,-14,-21,-58,0,-58,42,-42,50,-33,-14,60,-84,21,-14,-37,102,29,-12,26,-31,25,-58,29,6,56,43,62,-4,55,18,-46,0,-77,45,72,84,37,-59,37,16,8,42,-10,40,25,-62,127,2,-126,93,-13,8,11,-126,-15,-16,-9,-19,32,37,41, 
  /* [15][0][][] */ 69,-25,18,44,42,10,-14,-28,21,37,-60,-12,74,53,-20,-11,-3,13,-70,52,3,-31,21,26,55,-22,90,32,50,-38,-40,58,65,45,-11,-83,60,51,56,52,67,36,-23,9,-45,-127,34,-31,-22,-27,-31,-8,-10,-38,-43,49,-5,1,-18,11,4,-47,-36,27,32,42,-77,42,-8,-30,-6,-7,2,-119,-55,-99,-21,23,-122,33,68,-35,46,29,-65,4,-15,-15,39,84,11,-56,-33,-45,37,-46, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.003983193077147007, 0.0025904604699462652, 0.0026323604397475719, 0.0027075384277850389, 0.0046283896081149578, 0.0053927837871015072, 0.0027428844477981329, 0.002544517396017909, 0.0039641405455768108, 0.0043209223076701164, 0.0043804510496556759, 0.0035385633818805218, 0.0029109593015164137, 0.0048937303945422173, 0.0024746516719460487, 0.0033647534437477589, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8524, 72, -4987, 6132, -385, 974, -521, -1829, 3097, -3527, -595, -137, 9769, -3554, -257, -7404, -1497, 694, -10508, -1337, -1503, 845, -7535, -1312, 3, 9189, -8842, -5401, -758, -3532, -919, -1053, 19314, -399, -2167, 1032, 1295, 12651, 1239, 9241, -1372, 4922, 739, 8237, -548, 845, 10440, 1313, -5942, 249, -3351, 170, 122, -3222, -2950, 2649, 726, 2269, -143, 2591, -1406, -1458, -437, 8899, 9747, 1232, 11642, 5176, -1378, 809, 8027, -561, 199, 419, -3216, -425, 20579, 10477, 8003, 13508, 15895, -1405, 4882, 10336, -1492, -2302, 9047, -6221, 10277, -594, -9168, -1471, 169, 629, 18303, -495, };
const TfArray<96, float> quant16_scale = { 96, { 0.00012362847337499261, 0.00034551290445961058, 0.00021037216356489807, 0.00017172395018860698, 0.00028323158039711416, 0.00060964131262153387, 0.00011273975542280823, 0.00022446952061727643, 0.00041281818994320929, 0.00026405646349303424, 0.00035467208363115788, 0.00027777301147580147, 9.292773756897077e-05, 0.00014815546455793083, 0.00022675334184896201, 0.00015076593263074756, 0.00023300056636799127, 0.00038429797859862447, 0.00010991920862579718, 0.00040276016807183623, 0.00024011699133552611, 0.00022340189025271684, 8.455268107354641e-05, 0.00016156287165358663, 0.0033492590300738811, 0.00014649693912360817, 0.00025551460566930473, 0.00015929796791169792, 0.00031800181022845209, 0.00018255971372127533, 0.0001633605279494077, 0.00037626945413649082, 6.351704359985888e-05, 0.00051045574946328998, 0.00014038727385923266, 0.00022320993593893945, 0.00025346077745780349, 8.9643144747242332e-05, 0.00028712316998280585, 0.00011483218258945271, 0.00079091184306889772, 0.00020847823179792613, 0.00028713321080431342, 0.00011786634422605857, 0.000229221535846591, 0.00035632733488455415, 0.00012024430907331407, 0.00032331596594303846, 0.0001582242693984881, 0.00056860625045374036, 0.00027232198044657707, 0.0002006242866627872, 0.00016178807709366083, 0.00027750679873861372, 0.00031762479920871556, 0.00026567789609543979, 0.00021443766308948398, 0.00053862325148656964, 0.00050815881695598364, 0.00030882123974151909, 0.00027520456933416426, 0.00028280957485549152, 0.00016486019012518227, 0.00011312460992485285, 0.00024135920102708042, 0.00046816078247502446, 0.00013937697804067284, 0.00022714410442858934, 0.00028318367549218237, 0.00038855787715874612, 0.00014055111387278885, 0.0002506026066839695, 0.00064353091875091195, 0.00022437228471972048, 0.00016110588330775499, 0.00026909596635960042, 6.8738314439542592e-05, 0.00016098156629595906, 0.00015570514369755983, 0.00014376506442204118, 7.2552844358142465e-05, 0.00027340595261193812, 0.00015691382577642798, 0.00028756525716744363, 9.7451818874105811e-05, 0.00025653649936430156, 0.00014977254613768309, 0.00020649940415751189, 0.00011762748181354254, 0.00027872080681845546, 9.2473179392982274e-05, 0.00028513875440694392, 0.00050984241534024477, 0.00016812184185255319, 8.525187149643898e-05, 0.00027617070009000599, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -41,-15,2,-21,87,1,43,-11,-14,2,-11,-29,-46,2,-10,-9,-4,4,7,-14,-14,23,30,43,-1,-30,-23,8,15,-3,28,5,-29,4,-2,-32,0,-65,-53,23,7,-9,39,-34,-14,35,-89,-16,-12,4,-1,54,-66,6,42,-19,-3,-12,5,-25,-10,-10,-4,-36,-11,-25,-42,-19,-4,25,-13,3,30,1,-12,7,-38,8,127,-42,-92,9,-74,-20,-10,-14,36,13,-60,-11,2,-30,-10,28,-18,-2, -31,31,45,-51,-35,6,127,-49,-3,-10,-32,7,-78,-3,-104,71,-1,79,92,-19,-8,127,102,127,28,-10,44,79,127,27,127,-30,-111,-15,-91,-34,-24,-101,127,-38,-18,-127,-3,-63,68,-33,-57,-14,52,2,32,127,-94,40,-80,-14,-80,-11,-4,18,-12,-127,-123,-39,-34,2,-4,-72,4,16,-67,125,-127,-15,-1,-27,-127,-82,-3,-121,-101,11,44,-53,108,94,-47,33,-127,7,41,-8,7,127,-47,-95, -34,-4,-3,-6,61,-1,47,-23,-23,17,-10,-10,-28,4,-13,-25,-2,-4,1,-20,-14,6,32,29,-3,-25,3,-9,10,3,20,10,-35,4,-19,62,1,-56,-40,33,-1,-14,22,-30,-11,-27,-71,-27,-7,-4,0,35,0,-1,11,-20,52,-20,6,-30,-7,0,-48,6,-19,-35,127,-16,2,20,-14,16,16,6,-6,18,-27,26,-40,-35,-60,2,-77,-16,17,-23,23,-17,-53,-28,6,50,6,31,-23,6, 
  /* [0][1][][] */ -107,-9,43,-55,49,91,-36,-6,-10,-3,-19,-37,-127,35,18,93,-6,37,81,24,22,-18,119,-17,39,6,66,21,-12,16,-6,-15,-127,-17,83,-34,-18,-127,-60,-127,-14,1,79,-37,-71,127,-115,-69,63,57,16,-45,-115,72,84,-33,18,-29,36,-14,17,-3,97,-76,-40,9,-27,-47,-13,-13,-127,9,63,127,16,-74,-123,-74,-61,-47,-92,-1,-1,-63,60,24,-108,56,-73,127,90,-85,127,-4,-61,-6, 88,127,127,127,-127,-127,98,-47,127,127,-66,-68,-90,127,-28,127,127,-127,127,127,127,-77,122,-102,-127,-127,127,127,-110,127,-22,127,-57,127,127,-114,127,75,8,1,127,6,-127,-115,127,-23,127,127,127,-127,127,-122,110,127,-127,127,-127,127,-127,127,-92,125,106,-127,127,127,-18,127,-103,-127,-7,-127,6,113,127,67,24,-127,93,-127,30,127,127,127,127,74,-127,127,-79,51,25,-24,-96,-27,-127,-30, -127,-36,42,-54,15,47,-59,12,-39,-3,1,127,-107,31,22,68,-15,45,79,14,15,-22,85,-12,39,-10,40,0,-17,7,12,-8,-86,-30,86,127,-9,-85,-76,-63,-26,-6,14,-45,-62,-76,-109,-100,47,64,-3,-27,127,11,116,-51,91,-26,50,-46,7,-30,-127,-44,-79,-16,-58,-59,-21,-5,-106,-7,27,-98,12,127,-93,-46,-54,3,-114,-10,-37,-82,11,29,-91,43,-52,-74,127,127,-44,-26,-83,-10, 
  /* [0][2][][] */ -23,-42,-16,-24,27,-2,-1,20,-18,2,33,-39,59,3,-15,-24,6,-11,-52,-21,-18,-22,16,-17,1,3,-19,6,1,2,-26,5,-13,-4,12,-31,-15,-40,-4,-33,-19,7,14,-3,18,8,-42,4,-33,4,-23,-21,-5,-38,47,-17,12,-18,11,-20,2,22,2,-31,-47,-35,114,27,32,15,4,-11,-14,-16,2,-27,-32,16,-28,-17,-58,7,-70,-31,4,3,41,-18,6,1,3,-22,-13,-12,-7,-4, -10,-63,22,-107,-45,-7,53,127,-62,50,127,-32,-33,25,127,84,-2,-41,75,-46,-28,-45,127,17,18,4,25,21,-9,8,-82,-46,-84,-27,-102,-9,-106,-119,70,-93,-15,-102,-44,127,26,-25,-25,4,18,-12,-14,-10,56,23,-46,-50,-44,-50,51,-61,127,34,103,-30,-97,-61,-27,-41,127,23,-12,14,11,-30,25,-26,-23,-41,0,46,-127,-23,-71,-83,46,-127,-20,7,-12,0,54,2,13,-107,-48,127, -10,1,-11,-4,26,-15,0,21,-26,-9,18,36,80,4,-13,-40,3,2,-21,-27,-15,-14,2,-6,-3,1,-19,-6,-1,9,-36,4,-2,2,-1,-9,-19,-61,-12,-14,-27,2,-11,-15,13,-16,-38,5,-28,-8,-15,-17,-2,-43,43,-15,59,-13,16,-24,8,21,-9,-18,-41,-36,-28,21,25,4,-5,-9,-54,-35,-1,-16,-41,15,92,-3,-66,-3,-65,-16,-5,10,44,0,8,-1,-7,18,0,-17,2,-9, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0052542099729180336, 0.014684298075735569, 0.0089408168569207191, 0.007298267912119627, 0.012037341482937336, 0.025909755378961563, 0.0047914395108819008, 0.0095399543642997742, 0.01754477247595787, 0.011222399771213531, 0.015073562972247601, 0.011805352754890919, 0.0039494289085268974, 0.0062966072000563145, 0.0096370168030261993, 0.006407551933079958, 0.0099025238305330276, 0.016332663595676422, 0.0046715661883354187, 0.017117306590080261, 0.010204971767961979, 0.0094945803284645081, 0.0035934888292104006, 0.0068664220161736012, 0.14234350621700287, 0.0062261195853352547, 0.010859370231628418, 0.0067701633088290691, 0.013515076600015163, 0.0077587878331542015, 0.0069428225979208946, 0.015991451218724251, 0.0026994743384420872, 0.021694369614124298, 0.005966458935290575, 0.0094864219427108765, 0.010772082954645157, 0.0038098336663097143, 0.012202734127640724, 0.0048803677782416344, 0.033613752573728561, 0.0088603245094418526, 0.012203160673379898, 0.0050093196332454681, 0.0097419153898954391, 0.015143911354243755, 0.0051103830337524414, 0.013740928843617439, 0.0067245312966406345, 0.024165764451026917, 0.011573683470487595, 0.0085265319794416428, 0.0068759932182729244, 0.011794038116931915, 0.013499053195118904, 0.01129131019115448, 0.0091136004775762558, 0.022891487926244736, 0.021596748381853104, 0.013124902732670307, 0.011696193367242813, 0.012019407004117966, 0.0070065581239759922, 0.0048077958635985851, 0.010257765650749207, 0.019896833226084709, 0.005923521239310503, 0.0096536241471767426, 0.012035305611789227, 0.016513708978891373, 0.005973422434180975, 0.01065061055123806, 0.027350062504410744, 0.0095358220860362053, 0.00684700021520257, 0.011436577886343002, 0.0029213782399892807, 0.006841716356575489, 0.0066174683161079884, 0.0061100148595869541, 0.0030834958888590336, 0.011619752272963524, 0.0066688372753560543, 0.012221523560583591, 0.0041417023167014122, 0.010902800597250462, 0.0063653332181274891, 0.0087762242183089256, 0.0049991677515208721, 0.011845634318888187, 0.0039301100187003613, 0.012118397280573845, 0.021668301895260811, 0.0071451780386269093, 0.0036232045385986567, 0.011737254448235035, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1154, 7912, 275, 1343, 4403, 11425, 8, 2301, 10309, -1289, 15463, 5414, 2136, 437, 6100, 411, 2569, 5067, -318, 8761, 904, 8651, -1564, 1745, -10056, 1212, 2458, 1425, 6321, 1488, 3259, 3690, 2014, 11513, 3178, 3478, 2848, 1931, 4130, 2250, 25218, 1203, 2304, 1250, 4022, 8404, 8846, 9493, 1108, -850, 1442, 6321, 2350, -3287, 8646, 84, 2850, 13184, 1415, 1613, 2704, 10246, 3151, -102, 16920, 14210, 1618, 4142, 8670, 5305, 1835, 1383, -3514, 4293, 1375, 3012, 406, 10091, 3655, 7542, 2824, 903, 4816, 17582, -456, 8821, 5027, 1699, -800, 2488, 851, 9686, 4269, 3188, 5021, 4240, };
const TfArray<96, float> quant18_scale = { 96, { 0.000230627745622769, 9.7872791229747236e-05, 0.00028004086925648153, 0.00029686119523830712, 0.00014908918819855899, 8.0744321167003363e-05, 0.00023498437076341361, 0.00012974598212167621, 8.5607243818230927e-05, 0.00016090973804239184, 5.7450073654763401e-05, 9.4782117230352014e-05, 0.0001590549509273842, 0.00034396853880025446, 9.7529176855459809e-05, 0.00016136839985847473, 0.00022283286671154201, 0.000124968501040712, 0.00016219931421801448, 9.7273703431710601e-05, 0.00027580070309340954, 8.6265492427628487e-05, 0.00017147338076028973, 0.00013464603398460895, 7.4866700742859393e-05, 0.00012800087279174477, 0.0002064957661787048, 0.00022869405802339315, 0.00013411417603492737, 0.00017916341312229633, 0.00017477123765274882, 0.0001435188896721229, 0.00018104712944477797, 7.6473748777061701e-05, 0.00015677207557018846, 0.00018003972945734859, 0.00020948199380654842, 0.00019755051471292973, 0.00011108611215604469, 0.0001700104185147211, 3.8371323171304539e-05, 0.00020964954455848783, 0.00016644480638206005, 0.00011774256563512608, 9.7576412372291088e-05, 0.00010009394463850185, 8.0175756011158228e-05, 8.0728816101327538e-05, 0.00026016621268354356, 0.00023668623180128634, 0.00024217554891947657, 0.00011151380749652162, 0.00019672895723488182, 0.00012051465455442667, 8.4600163972936571e-05, 0.00032180960988625884, 0.00011949117470066994, 6.529055826831609e-05, 0.00013532361481338739, 0.0001855999871622771, 0.00015752816398162395, 8.2587037468329072e-05, 0.00019747992337215692, 0.00026848021661862731, 5.8756369980983436e-05, 6.4311861933674663e-05, 0.00025412405375391245, 0.00014152255607768893, 8.9083936472889036e-05, 9.7372445452492684e-05, 0.00025812673266045749, 0.00016840909665916115, 0.00016225496074184775, 0.00015055001131258905, 0.00025315620587207377, 0.00021165961516089737, 0.00017683733312878758, 8.3013524999842048e-05, 0.00016162474639713764, 0.00011817195627372712, 0.00015156691370066255, 0.00017777398170437664, 0.00010537960042711347, 5.7082786952378228e-05, 0.00012692403106484562, 8.2209327956661582e-05, 0.00013550437870435417, 0.00024397361266892403, 0.00022498787438962609, 0.00022439318126998842, 0.00021153967827558517, 8.9754590590018779e-05, 0.00010846449004020542, 0.00012789042375516146, 9.9367054644972086e-05, 0.0001572351175127551, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 57,-4,6,82,-127,-25,103,63,75,99,-24,57,19,12,25,86, 
  /* [1][0][][] */ -25,32,-90,-10,127,105,8,-6,-31,8,-67,39,-54,90,-66,-38, 
  /* [2][0][][] */ -45,65,77,1,59,89,14,32,34,-11,41,-24,52,-127,-16,13, 
  /* [3][0][][] */ 127,-26,22,13,31,27,-15,13,36,30,-46,-23,-43,46,-28,55, 
  /* [4][0][][] */ -86,0,4,14,-94,4,-70,-21,-24,30,-10,-33,-9,31,-36,127, 
  /* [5][0][][] */ -107,10,38,23,127,28,5,29,-47,23,-11,8,-78,60,-104,-34, 
  /* [6][0][][] */ -127,18,-46,42,-1,-79,73,23,12,-33,-58,40,15,-3,-44,4, 
  /* [7][0][][] */ 0,120,59,-108,71,58,127,-2,56,7,-5,43,112,33,-29,4, 
  /* [8][0][][] */ -31,-31,-68,61,-53,82,-53,-68,37,-42,86,30,127,56,-112,2, 
  /* [9][0][][] */ -22,-127,-20,72,-36,-56,-14,54,46,47,7,65,-69,12,-4,-34, 
  /* [10][0][][] */ -40,-49,-86,36,-80,127,38,-88,39,-37,36,-37,52,94,-86,53, 
  /* [11][0][][] */ -52,-95,-42,26,-7,83,33,0,9,10,49,-90,1,105,-115,127, 
  /* [12][0][][] */ -23,-102,-81,111,-105,-127,22,70,79,70,-39,113,-5,-67,-20,-11, 
  /* [13][0][][] */ -72,-17,-38,-9,-27,3,40,14,-26,127,-8,-27,41,35,13,-6, 
  /* [14][0][][] */ -125,-7,-63,-56,-45,99,-25,-113,127,-88,94,-21,95,-78,-114,-92, 
  /* [15][0][][] */ 9,-127,97,-50,-53,-42,5,56,18,-48,-92,-39,80,-49,-19,-52, 
  /* [16][0][][] */ -27,-34,25,-39,36,33,-18,-36,62,-127,37,-27,-1,1,-83,-95, 
  /* [17][0][][] */ -3,20,35,-52,31,-7,-45,-12,85,-51,20,67,111,-103,-21,-127, 
  /* [18][0][][] */ 86,4,-26,-120,4,-32,117,-47,31,65,-3,70,-16,71,1,-127, 
  /* [19][0][][] */ -22,-39,-30,-63,-88,46,-27,-11,55,-29,18,-127,-14,-24,-25,-16, 
  /* [20][0][][] */ 30,72,84,-91,69,-21,-56,89,-114,-127,32,-77,-41,103,-25,-26, 
  /* [21][0][][] */ 6,-103,-118,-13,111,38,87,89,-79,-79,-47,30,127,-91,-22,32, 
  /* [22][0][][] */ 45,-13,71,-19,8,20,59,20,32,127,22,28,-5,1,102,-12, 
  /* [23][0][][] */ -114,-93,-25,84,76,28,-3,17,-5,29,3,-91,-12,82,78,127, 
  /* [24][0][][] */ 7,-13,32,34,17,-94,6,-59,28,127,-108,70,-26,-71,72,-79, 
  /* [25][0][][] */ 127,-57,108,126,45,-3,-21,37,-118,85,71,-48,-23,29,61,-12, 
  /* [26][0][][] */ -18,20,13,45,-50,111,-20,38,-53,-32,-79,33,5,17,42,-127, 
  /* [27][0][][] */ 40,-1,-11,-59,-55,0,-92,14,-97,-25,-76,-46,-83,42,-11,127, 
  /* [28][0][][] */ -78,12,20,-10,37,-3,-127,-1,-1,-34,-15,-10,24,-52,-87,-37, 
  /* [29][0][][] */ -34,-100,-26,81,-35,17,127,5,62,49,-96,56,36,-15,-47,86, 
  /* [30][0][][] */ 47,-55,-56,26,-127,5,44,-24,18,-7,0,-27,-24,51,11,73, 
  /* [31][0][][] */ -127,-15,11,91,-35,7,-47,-3,-26,-50,2,-44,-26,-53,-26,85, 
  /* [32][0][][] */ -127,-94,-103,5,-79,-39,5,-9,119,55,-53,-52,51,56,22,-13, 
  /* [33][0][][] */ -5,5,-94,35,-127,-93,56,-11,-101,20,-70,-68,-19,108,72,64, 
  /* [34][0][][] */ 22,55,-2,37,-60,-41,36,9,16,-127,-19,31,-29,2,24,88, 
  /* [35][0][][] */ 48,-2,-63,-3,-127,5,85,-34,21,44,-14,-17,15,61,33,58, 
  /* [36][0][][] */ 0,-4,-49,51,127,-19,32,59,-67,22,-83,-70,26,-19,13,20, 
  /* [37][0][][] */ -127,41,-13,-71,56,-80,-45,-17,2,-16,-24,51,54,-63,14,-118, 
  /* [38][0][][] */ 40,100,41,-64,-90,-66,-127,-68,-31,-56,45,67,-69,-106,63,-25, 
  /* [39][0][][] */ 22,-72,16,114,39,91,80,-72,-19,76,11,-28,-7,127,51,125, 
  /* [40][0][][] */ 127,64,82,102,-64,-60,-1,13,-92,75,-14,-14,-66,-48,126,-1, 
  /* [41][0][][] */ -12,-25,14,61,-84,98,-11,64,-41,31,-105,17,15,27,67,-127, 
  /* [42][0][][] */ 5,-102,28,-11,127,26,73,16,-28,-107,-90,-33,-18,2,-10,39, 
  /* [43][0][][] */ -50,-97,-45,10,121,24,6,98,-82,-78,-120,-83,127,6,-68,74, 
  /* [44][0][][] */ -31,-63,-93,-114,36,88,63,10,-35,-127,-77,83,-41,35,47,112, 
  /* [45][0][][] */ 7,-48,-70,-5,-127,57,-18,-63,50,-50,34,-42,-8,15,-33,47, 
  /* [46][0][][] */ 22,-104,-24,1,103,-87,-14,111,-8,-29,29,68,-50,-41,73,-127, 
  /* [47][0][][] */ -88,-32,-22,82,-35,23,56,52,-4,114,91,87,-33,90,-11,127, 
  /* [48][0][][] */ 47,-16,-74,-84,37,-65,3,47,49,-69,-5,28,-53,5,-38,-127, 
  /* [49][0][][] */ 51,39,6,38,-13,-28,50,47,-40,127,-33,35,-46,-28,69,89, 
  /* [50][0][][] */ 13,-2,16,13,-127,-23,-16,-47,59,27,21,63,-26,-70,18,-4, 
  /* [51][0][][] */ 22,-1,-18,-127,-37,100,54,-43,12,4,47,-45,65,91,-23,19, 
  /* [52][0][][] */ 24,-28,-7,-76,79,-107,-16,-28,42,2,127,-51,30,5,-29,83, 
  /* [53][0][][] */ -53,-59,53,-33,-46,-127,26,-116,-15,97,-108,83,-32,-24,30,-86, 
  /* [54][0][][] */ 79,71,62,-1,-127,-51,-79,-103,-8,10,45,55,-77,-51,52,-3, 
  /* [55][0][][] */ 11,10,-39,77,-33,27,37,-12,4,127,23,64,-2,7,-3,51, 
  /* [56][0][][] */ 42,-104,-84,75,-88,46,-1,72,127,7,75,58,-46,-34,53,93, 
  /* [57][0][][] */ 57,36,87,-89,64,-6,-14,12,67,-32,33,127,41,-61,122,-47, 
  /* [58][0][][] */ 99,-47,23,-69,29,15,-2,127,45,102,1,52,46,2,100,-1, 
  /* [59][0][][] */ -50,39,29,-39,-13,-94,-2,17,-8,8,-106,-93,-127,-62,76,-9, 
  /* [60][0][][] */ 42,-25,18,-3,3,-6,39,-75,17,127,-28,62,-1,-28,-24,-31, 
  /* [61][0][][] */ 74,58,3,-15,-90,-127,-19,-59,-61,-21,-14,12,-86,-54,72,81, 
  /* [62][0][][] */ -20,81,-43,41,-56,127,-50,29,-50,9,-38,31,-35,42,63,-97, 
  /* [63][0][][] */ 23,-3,-67,-127,-16,-41,70,-9,-6,-87,-29,25,-41,59,35,-26, 
  /* [64][0][][] */ -46,29,-1,-27,40,-56,33,67,-127,-22,-65,-47,-32,79,39,70, 
  /* [65][0][][] */ -59,-7,-43,-29,58,40,-40,-88,-127,-60,4,-34,-117,104,-55,50, 
  /* [66][0][][] */ -14,54,-12,34,-47,127,-22,23,-61,21,-31,44,-30,60,51,-84, 
  /* [67][0][][] */ 30,-20,-38,-17,13,-98,67,-101,-2,28,7,112,-69,-33,-17,-127, 
  /* [68][0][][] */ 28,-127,-27,95,-16,-4,25,90,43,45,69,9,-90,31,-3,-4, 
  /* [69][0][][] */ 21,82,90,-124,43,11,-22,111,43,91,67,81,103,-88,47,-127, 
  /* [70][0][][] */ 42,21,40,-45,100,11,-102,-46,-127,-94,-7,46,-30,60,-105,-5, 
  /* [71][0][][] */ -22,-69,30,-42,68,-19,38,39,-74,78,-127,-42,10,94,0,53, 
  /* [72][0][][] */ 18,18,65,19,-71,-35,-121,-68,-11,59,-27,59,32,118,-127,-9, 
  /* [73][0][][] */ 10,-31,-17,-35,35,-127,34,-50,69,88,116,-12,16,-37,-75,127, 
  /* [74][0][][] */ 1,2,-29,83,-74,-6,92,25,65,63,25,108,127,28,-52,18, 
  /* [75][0][][] */ -28,53,-21,40,-58,127,-21,22,-42,32,-38,55,-24,47,33,-72, 
  /* [76][0][][] */ -51,87,-41,56,-105,-10,0,15,49,40,-43,-43,54,-59,-127,28, 
  /* [77][0][][] */ 127,115,-116,122,81,70,76,69,49,16,100,-32,84,38,98,30, 
  /* [78][0][][] */ 10,-44,-4,-55,66,-116,29,-48,48,42,127,-26,5,-15,-39,120, 
  /* [79][0][][] */ -45,56,3,6,-6,-31,-17,-11,-127,-10,29,2,108,45,-79,-36, 
  /* [80][0][][] */ -66,24,93,17,74,47,-14,-127,-73,77,-63,-43,-12,-88,41,56, 
  /* [81][0][][] */ 83,71,-16,7,20,-40,80,116,-112,111,-59,-39,-38,23,116,127, 
  /* [82][0][][] */ 44,114,-40,-74,-14,-36,122,-127,35,14,-66,54,115,-19,39,-54, 
  /* [83][0][][] */ 18,-33,27,32,4,17,-35,-89,73,-29,93,18,31,-59,-41,-127, 
  /* [84][0][][] */ -127,-77,-43,-21,-12,86,82,0,63,59,83,73,51,78,-67,18, 
  /* [85][0][][] */ 103,-12,87,-80,90,-1,-26,85,23,127,-72,6,-29,66,108,19, 
  /* [86][0][][] */ -85,75,-33,-8,29,90,19,20,97,42,127,-28,-24,71,-5,-21, 
  /* [87][0][][] */ 14,-60,27,-41,46,-127,24,-29,46,-9,63,-34,35,-42,-39,67, 
  /* [88][0][][] */ -89,42,42,8,119,-33,36,33,-62,-81,105,-75,80,119,109,-127, 
  /* [89][0][][] */ -30,40,-19,23,-34,127,-21,38,-43,10,-34,19,-14,54,31,-78, 
  /* [90][0][][] */ 73,-88,27,30,127,-17,32,30,4,-83,-105,-18,-22,-23,-46,13, 
  /* [91][0][][] */ -13,64,-35,-34,2,-70,-95,37,-95,17,-111,-127,-120,-80,-13,8, 
  /* [92][0][][] */ 95,54,82,41,-127,-114,8,-3,-16,57,-41,-26,-21,-87,32,-17, 
  /* [93][0][][] */ -25,-127,-101,51,-56,-45,-5,107,68,48,4,54,-55,69,-19,-14, 
  /* [94][0][][] */ 115,4,127,-10,26,-38,15,41,33,83,9,64,5,3,117,-17, 
  /* [95][0][][] */ -43,-52,-9,-20,127,-3,22,70,-15,8,-80,-34,13,9,-38,12, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0041669001802802086, 0.0017683308105915785, 0.0050596790388226509, 0.0053635826334357262, 0.0026936903595924377, 0.0014588596532121301, 0.0042456141673028469, 0.0023442043457180262, 0.0015467212069779634, 0.0029072598554193974, 0.0010379875311627984, 0.001712489640340209, 0.0028737483080476522, 0.0062147011049091816, 0.0017621224978938699, 0.0029155467636883259, 0.0040260651148855686, 0.0022578863427042961, 0.0029305594507604837, 0.0017575067467987537, 0.004983068909496069, 0.0015586141962558031, 0.0030981199815869331, 0.0024327365681529045, 0.0013526648981496692, 0.0023126741871237755, 0.0037308919709175825, 0.0041319630108773708, 0.002423127181828022, 0.0032370609696954489, 0.0031577046029269695, 0.002593048382550478, 0.0032710952218621969, 0.0013817005092278123, 0.0028325021266937256, 0.0032528936862945557, 0.0037848460488021374, 0.0035692723467946053, 0.0020070644095540047, 0.0030716878827661276, 0.00069327943492680788, 0.0037878735456615686, 0.0030072655063122511, 0.0021273307502269745, 0.0017629759386181831, 0.0018084618495777249, 0.0014485870487987995, 0.0014585795579478145, 0.0047005908563733101, 0.0042763627134263515, 0.0043755415827035904, 0.0020147918257862329, 0.0035544289276003838, 0.002177415881305933, 0.0015285257250070572, 0.0058143413625657558, 0.0021589240059256554, 0.0011796465842053294, 0.0024449790362268686, 0.0033533545210957527, 0.0028461627662181854, 0.0014921532711014152, 0.003567997133359313, 0.0048508052714169025, 0.0010615892242640257, 0.001161963795311749, 0.0045914230868220329, 0.0025569791905581951, 0.0016095369355753064, 0.0017592906951904297, 0.0046637421473860741, 0.0030427556484937668, 0.0029315650463104248, 0.0027200840413570404, 0.0045739361084997654, 0.0038241907022893429, 0.0031950341071933508, 0.00149985880125314, 0.0029201784636825323, 0.0021350889001041651, 0.0027384571731090546, 0.0032119571696966887, 0.0019039611797779799, 0.0010313515085726976, 0.0022932181600481272, 0.0014853288885205984, 0.0024482449516654015, 0.0044080284424126148, 0.0040650009177625179, 0.0040542562492191792, 0.0038220237474888563, 0.0016216540243476629, 0.0019596978090703487, 0.0023106788285076618, 0.0017953285714611411, 0.0028408681973814964, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -5054, 11478, -19161, 1395, 11182, -15247, -39064, -9026, -6384, 6939, -16476, -13476, 7133, -10932, -4043, -2487, };
const TfArray<16, float> quant20_scale = { 16, { 0.00014165630273055285, 0.00013991151354275644, 0.00013490427227225155, 0.0001562490506330505, 9.262754610972479e-05, 0.0001383622147841379, 0.00011706713848980144, 0.00016415052232332528, 0.00010553151514614001, 7.0893489464651793e-05, 0.00018626997189130634, 0.00014008487050887197, 0.00013034767471253872, 0.00010367984941694885, 0.00011449919838923961, 0.00014003000978846103, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 26,44,24,-37,73,69,-45,57,-17,117,4,40,-40,42,-16,41,30,84,39,-71,-71,79,-8,53,65,50,43,57,-47,-48,-7,90,-29,6,-68,60,50,-127,-35,14,18,-29,60,-8,-11,-56,-62,-13, 
  /* [1][0][][] */ -53,3,-76,-45,6,85,-62,17,-15,-32,-44,33,56,-14,-30,-26,-29,-32,-8,20,-72,45,-109,-51,-53,-36,51,64,-27,-26,45,-42,11,-69,-40,51,13,-56,127,-36,-21,31,-48,-15,35,48,33,23, 
  /* [2][0][][] */ 2,8,57,-35,-20,-81,15,24,102,79,-66,12,112,-53,127,84,-73,-26,-29,32,86,-81,-41,-101,22,-36,45,-73,50,45,-40,11,36,-35,59,52,-68,8,0,-26,29,27,63,-22,16,-89,99,-55, 
  /* [3][0][][] */ 38,5,-21,-24,33,110,19,-16,44,-50,24,-20,-45,4,13,42,-40,-66,34,-127,-5,-2,-27,-20,-39,88,124,66,-8,-42,28,42,57,-31,94,35,-44,-58,4,36,21,13,-13,2,23,24,-11,-27, 
  /* [4][0][][] */ 91,-7,-2,-41,87,80,54,6,71,-18,-99,28,44,-20,20,-15,-97,-114,-14,-100,-13,22,-36,-32,-80,127,-98,120,-48,-56,28,75,36,-49,19,-30,-10,14,-21,32,-58,-15,-3,47,-54,106,-31,-63, 
  /* [5][0][][] */ -2,-5,-54,7,-14,53,20,-26,63,51,41,92,54,-23,31,-6,-36,127,-11,39,13,-5,-65,-16,31,-4,-66,-33,-14,29,21,-19,-41,1,41,12,-47,7,-81,3,79,-20,26,46,-13,8,-37,30, 
  /* [6][0][][] */ 58,12,8,73,9,-22,102,-50,0,58,127,109,45,39,-51,56,53,-39,-66,89,56,-65,-34,61,-90,76,81,-2,112,47,-28,-7,93,-55,-107,-15,91,29,7,-3,7,52,54,-34,66,116,33,-6, 
  /* [7][0][][] */ -95,-3,-24,29,-56,-52,21,47,77,109,-51,-70,-92,5,-17,-17,-72,97,5,120,-41,39,24,37,-21,-95,-32,-76,31,37,-6,3,-16,17,19,-16,-1,-58,127,11,2,42,26,-16,52,65,-27,-1, 
  /* [8][0][][] */ -9,-97,51,-66,68,-59,82,-46,-16,-125,27,11,-31,3,39,31,-5,7,-37,102,6,44,-19,25,77,-12,-67,-32,-121,-26,-58,-116,8,-66,2,91,-7,33,110,21,13,-6,77,127,-13,-64,-49,77, 
  /* [9][0][][] */ 20,-31,23,-66,40,80,-43,45,22,-33,-40,-18,19,-50,110,-16,11,-119,44,49,-73,43,58,-42,-20,-77,-21,81,60,74,-42,-32,-50,31,-12,127,-25,-43,-51,-21,-29,-1,34,103,58,74,-66,18, 
  /* [10][0][][] */ -16,21,-26,-9,22,29,-68,-41,50,44,64,-7,-38,-8,47,-50,-60,127,-4,55,-2,-12,21,29,-46,43,5,94,36,5,-35,-11,72,12,-9,27,-10,-49,-40,20,-78,-1,26,-17,21,38,35,36, 
  /* [11][0][][] */ -31,45,-18,39,30,59,3,11,17,23,-127,-71,73,22,-8,-52,-2,25,-38,-47,-6,-8,106,2,41,12,-23,36,-5,31,-10,49,24,-1,-48,-3,41,82,106,19,30,-28,64,0,-50,-15,82,-2, 
  /* [12][0][][] */ -61,-8,32,24,-60,-54,8,2,-38,-33,-127,21,75,-99,18,37,54,98,91,-118,-29,41,-44,-81,-9,-21,28,-31,5,19,-18,80,62,75,36,-39,-56,-31,32,-4,-33,14,65,0,36,-10,-46,-42, 
  /* [13][0][][] */ -60,-120,-45,-101,10,23,56,13,-127,30,121,-62,51,43,120,6,120,25,-5,-88,75,-86,122,3,-89,6,-30,12,-57,-101,-115,15,47,-21,-71,54,26,-58,84,-79,-6,59,73,38,64,-40,108,-60, 
  /* [14][0][][] */ 67,23,-48,8,-39,14,-83,-23,-25,59,54,39,-17,-57,15,-43,48,-113,25,6,92,-56,28,0,-3,125,-83,3,-54,-31,-91,5,127,41,94,-17,-81,9,-21,63,-14,-43,105,-23,-59,-43,-57,52, 
  /* [15][0][][] */ -65,14,39,18,99,5,-2,35,18,79,-16,58,54,-15,-39,-17,16,37,-2,-33,25,-43,-49,-55,44,-68,-38,67,-38,7,15,7,-60,2,127,-10,-92,15,59,-20,-42,-17,18,-5,-32,-39,-7,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.006020392756909132, 0.0059462394565343857, 0.0057334313169121742, 0.0066405846737325191, 0.00393667072057724, 0.0058803940191864967, 0.004975353367626667, 0.0069763967767357826, 0.0044850893318653107, 0.0030129733495414257, 0.0079164737835526466, 0.0059536071494221687, 0.0055397762916982174, 0.0044063935056328773, 0.0048662158660590649, 0.0059512751176953316, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13972, -329, 17451, -62, 15522, -2833, 34240, 671, 10709, 33332, 4958, 25380, 777, 12407, 39822, 22845, 26, 3744, 3850, 40386, 684, 18343, 1474, 18314, 19028, 31991, 1762, -1785, -3039, 13609, 21293, -90, -172, -670, 2167, 16541, 8563, 32882, 3339, 16794, 27486, 3143, 928, 14843, 781, -450, 38174, 25457, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9612186052836478e-05, 0.00011297807213850319, 7.1856025897432119e-05, 9.6899515483528376e-05, 0.0001150646639871411, 8.9546534582041204e-05, 6.0457874496933073e-05, 0.00032116140937432647, 9.6658841357566416e-05, 6.7785927967634052e-05, 5.4623076721327379e-05, 8.7757507571950555e-05, 7.1137474151328206e-05, 0.00010766959894681349, 4.319314393796958e-05, 9.4490125775337219e-05, 0.00011359486234141514, 5.6602450058562681e-05, 0.00011961257405346259, 5.6033029977697879e-05, 6.526707875309512e-05, 5.8098019508179277e-05, 8.1229583884123713e-05, 0.00011210006050532684, 5.5584892834303901e-05, 8.1341473560314626e-05, 5.1968385378131643e-05, 5.4367927077692002e-05, 0.00025226431898772717, 9.9839373433496803e-05, 6.4626110543031245e-05, 0.00031620918889530003, 0.00014374071906786412, 0.00015872575750108808, 7.8559751273132861e-05, 6.731667963322252e-05, 8.94451659405604e-05, 5.2062001486774534e-05, 8.1634723755996674e-05, 9.5489012892358005e-05, 5.1083829021081328e-05, 0.00018919305875897408, 0.00020622696320060641, 7.2859598731156439e-05, 0.00021532121172640473, 6.6789616539608687e-05, 5.2084767958149314e-05, 5.5574531870661303e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -107,63,-127,86,-100,67,-37,101,-82,-65,62,-47,63,-76,-48,-52,68,79,86,-106,91,-125,94,-89,-111,-63,64,127,-102,-41,-93,63,72,-92,66,-118,-74,-127,93,-45,-12,-103,100,-76,93,61,-56,-70, -127,84,-69,106,-81,124,-27,127,-114,-89,98,-72,91,-105,-78,-72,93,113,127,-127,108,-127,107,-127,-117,-89,77,118,31,-57,-100,111,100,-127,94,-127,-92,-127,116,-64,-110,102,101,-74,-38,90,-67,-116, -66,51,4,18,-7,69,-9,52,-48,-43,41,-29,49,-55,-29,-16,34,50,67,-38,38,-67,51,-48,-89,-34,24,29,102,-16,-46,19,33,-84,37,-39,-30,-28,46,-43,-127,-38,25,-15,-60,68,-13,-84, 
  /* [0][1][][] */ -105,88,-68,118,-70,109,-116,85,-100,-99,86,-86,83,-107,-94,-97,103,94,-55,-89,107,-106,107,-79,-120,-87,100,99,-127,-90,-110,76,98,29,92,-105,-102,-127,102,-86,-113,-125,120,-127,127,76,-119,-81, -127,127,-108,127,-127,127,-127,98,-127,-127,127,-127,127,-127,-127,-127,127,127,-64,-104,127,-98,127,-117,-127,-127,127,104,23,-127,-127,127,127,38,127,-109,-127,-104,127,-127,-123,127,127,-111,-60,127,-127,-127, -73,70,-70,51,-48,35,-54,23,-62,-44,53,-61,59,-47,-51,-17,77,50,-41,-27,48,-50,43,-45,-121,-49,51,50,115,-51,-62,53,39,10,57,-44,-49,-10,57,-69,-63,-70,37,-49,-93,89,-32,-86, 
  /* [0][2][][] */ -55,56,3,63,-29,47,-72,46,-54,-54,37,-63,38,-63,-54,-59,63,48,-78,-3,20,-34,35,-36,-60,-38,61,0,-74,-58,-38,67,28,67,42,-72,-33,-66,29,-38,-104,-62,54,-99,76,33,-66,-34, -77,70,-78,74,-61,40,-77,49,-66,-64,59,-87,57,-75,-84,-54,82,62,-101,-3,20,-33,36,-54,-71,-55,75,25,7,-82,-59,69,35,89,52,-72,-43,-56,31,-53,-50,62,59,-108,-34,65,-70,-58, -36,42,-63,25,-35,-3,-35,32,-26,-24,32,-40,32,-28,-43,5,55,27,-68,15,9,2,10,-15,-46,-17,43,16,68,-34,-16,41,4,49,22,-27,0,-5,15,-25,15,-27,14,-34,-54,56,-25,-48, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029585179872810841, 0.0048015681095421314, 0.0030538809951394796, 0.0041182292625308037, 0.00489024817943573, 0.0038057276979088783, 0.0025694596115499735, 0.013649359345436096, 0.0041080005466938019, 0.0028809017967432737, 0.0023214807733893394, 0.0037296940572559834, 0.0030233424622565508, 0.0045759580098092556, 0.0018357086228206754, 0.0040158303454518318, 0.004827781580388546, 0.0024056041147559881, 0.0050835344009101391, 0.0023814036976546049, 0.0027738506905734539, 0.0024691657163202763, 0.0034522572532296181, 0.0047642523422837257, 0.0023623579181730747, 0.0034570125862956047, 0.0022086563985794783, 0.0023106369189918041, 0.010721233673393726, 0.0042431731708347797, 0.0027466095052659512, 0.013438890688121319, 0.0061089801602065563, 0.0067458446137607098, 0.0033387893345206976, 0.0028609586879611015, 0.0038014193996787071, 0.0022126350086182356, 0.003469475544989109, 0.0040582828223705292, 0.0021710626315325499, 0.0080407047644257545, 0.008764646016061306, 0.0030965330079197884, 0.0091511514037847519, 0.00283855851739645, 0.0022136026527732611, 0.0023619176354259253, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1559, -1268, 752, -1976, 3750, -602, 4332, -3581, 808, 658, 2097, 4062, 431, -380, 664, 3857, -1662, 2870, 4774, 891, -843, 2666, -679, 6687, 1907, 1704, 1152, -768, 9530, -211, 2280, -2192, -757, 4339, -1057, 2391, 2082, 939, 252, 4958, 1476, 7544, -4262, 1832, 6829, 320, 2103, 2264, };
const TfArray<48, float> quant24_scale = { 48, { 0.00024804376880638301, 0.00027924196911044419, 0.00032524592825211585, 0.00021966843632981181, 0.00021658233890775591, 0.00025820772862061858, 0.00018107813957612962, 0.00016356703417841345, 0.00033294630702584982, 0.00030711863655596972, 0.00019048468675464392, 0.00019332696683704853, 0.00026283063925802708, 0.00028769194614142179, 0.00026647665072232485, 0.00020869093714281917, 0.00025559228379279375, 0.00026151415659114718, 0.0001795479329302907, 0.00028832355746999383, 0.00027178635355085135, 0.00020303220662754029, 0.00021125302009750158, 0.00013122418022248894, 0.0002373579191043973, 0.0002443368430249393, 0.00028150680009275675, 0.00031828312785364687, 9.9460419733077288e-05, 0.0004037352919112891, 0.00019543373491615057, 0.00016370056255254894, 0.00020187049813102931, 0.00017310751718468964, 0.0002053664211416617, 0.00023014242469798774, 0.00021177405142225325, 0.00029138408717699349, 0.00026775262085720897, 0.00015811395132914186, 0.00034539535408839583, 0.00011513972276588902, 0.00012726752902381122, 0.00023276290448848158, 0.00012321691610850394, 0.000237375104916282, 0.00025997764896601439, 0.00025991516304202378, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 56,36,127,-35,57,93,-71,-47, 
  /* [1][0][][] */ 9,-82,-127,6,54,21,28,2, 
  /* [2][0][][] */ -127,-7,-44,-25,58,28,-73,-39, 
  /* [3][0][][] */ 35,67,127,-80,-2,-109,-2,-11, 
  /* [4][0][][] */ -127,25,-53,-25,48,7,-41,-57, 
  /* [5][0][][] */ -96,18,-50,-16,11,44,-77,-127, 
  /* [6][0][][] */ -38,-127,-110,38,96,16,10,38, 
  /* [7][0][][] */ -62,-127,-96,-72,-67,-69,20,84, 
  /* [8][0][][] */ 74,43,-5,5,78,-73,-127,14, 
  /* [9][0][][] */ -36,64,-58,101,-69,-43,127,-34, 
  /* [10][0][][] */ -28,127,39,68,126,-21,-7,55, 
  /* [11][0][][] */ -83,-41,-21,-9,-92,112,127,-10, 
  /* [12][0][][] */ 69,32,-127,36,-8,-34,-71,-13, 
  /* [13][0][][] */ 66,-34,-67,3,17,-127,-27,-23, 
  /* [14][0][][] */ 6,-71,79,17,127,-119,-67,26, 
  /* [15][0][][] */ -39,-42,-2,127,61,87,-76,25, 
  /* [16][0][][] */ 117,18,-37,12,79,-119,-127,-30, 
  /* [17][0][][] */ 55,127,53,74,46,61,23,-84, 
  /* [18][0][][] */ 30,-2,4,2,127,-2,24,-5, 
  /* [19][0][][] */ 14,127,34,13,-123,16,20,-36, 
  /* [20][0][][] */ -45,9,68,-127,19,34,-8,99, 
  /* [21][0][][] */ -41,77,48,-127,24,43,-12,108, 
  /* [22][0][][] */ -75,-77,-99,15,-123,127,111,-25, 
  /* [23][0][][] */ 99,35,-127,10,18,-55,-67,-23, 
  /* [24][0][][] */ -50,51,11,6,-19,77,-127,99, 
  /* [25][0][][] */ -98,-57,-127,12,-54,-71,61,91, 
  /* [26][0][][] */ 47,-11,-42,-31,111,-19,127,-43, 
  /* [27][0][][] */ 127,-75,29,87,3,34,-16,88, 
  /* [28][0][][] */ 42,59,52,-9,127,-60,48,-31, 
  /* [29][0][][] */ -15,-8,-26,-43,-65,17,127,-35, 
  /* [30][0][][] */ 32,-127,-45,-71,-94,2,17,-50, 
  /* [31][0][][] */ 11,29,-7,-11,-127,7,-29,-9, 
  /* [32][0][][] */ 43,-69,-58,74,-7,-87,117,-127, 
  /* [33][0][][] */ 50,127,66,43,93,-17,-15,-20, 
  /* [34][0][][] */ -123,-35,127,-15,-22,100,102,14, 
  /* [35][0][][] */ -35,80,127,-13,-61,-72,-39,30, 
  /* [36][0][][] */ -93,8,103,-22,-17,127,78,27, 
  /* [37][0][][] */ -19,-81,-13,-127,-41,-88,71,44, 
  /* [38][0][][] */ 45,-13,87,-54,53,56,-127,10, 
  /* [39][0][][] */ -22,114,-127,-37,-20,-5,5,96, 
  /* [40][0][][] */ 66,-57,21,29,14,0,9,127, 
  /* [41][0][][] */ -22,81,127,0,14,77,-66,19, 
  /* [42][0][][] */ 62,-127,-105,-18,-118,11,16,-85, 
  /* [43][0][][] */ -13,-94,26,-77,127,-39,24,34, 
  /* [44][0][][] */ 11,123,127,24,12,63,-74,3, 
  /* [45][0][][] */ -33,44,12,83,-111,60,-127,22, 
  /* [46][0][][] */ -41,-29,57,50,-127,-104,-33,1, 
  /* [47][0][][] */ -20,60,44,-104,-127,29,-22,61, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0027782286051660776, 0.0031276657246053219, 0.0036429357714951038, 0.0024604089558124542, 0.0024258429184556007, 0.0028920706827193499, 0.0020281760953366756, 0.0018320420058444142, 0.003729184390977025, 0.0034398999996483326, 0.0021335347555577755, 0.0021653699222952127, 0.0029438496567308903, 0.0032223102170974016, 0.0029846869874745607, 0.0023374548181891441, 0.0028627761639654636, 0.0029291042592376471, 0.002011036965996027, 0.0032293845433741808, 0.003044158685952425, 0.0022740738932043314, 0.0023661516606807709, 0.0014697839505970478, 0.0026585410814732313, 0.0027367088478058577, 0.0031530330888926983, 0.0035649486817419529, 0.0011140122078359127, 0.0045220605097711086, 0.0021889668423682451, 0.0018335375934839249, 0.0022610621526837349, 0.001938900793902576, 0.0023002184461802244, 0.0025777234695851803, 0.0023719875607639551, 0.0032636644318699837, 0.0029989788308739662, 0.0017709644744172692, 0.0038686206098645926, 0.0012896291445940733, 0.0014254673151299357, 0.0026070743333548307, 0.0013800981687381864, 0.0026587336324155331, 0.0029118945822119713, 0.0029111949261277914, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 3328, 808, 23434, -5014, 5955, -14723, 1611, -14104, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.6888147052377462e-05, 0.00010285044845659286, 0.0001325076591456309, 9.0665867901407182e-05, 0.00014072141493670642, 0.00013573130127042532, 9.1742185759358108e-05, 8.5340427176561207e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -32,-48,-19,-66,6,-13,88,83,-100,-84,-29,5,-55,-1,-58,35,-79,8,14,127,54,-24,4,96,70,73,29,-1,-91,-57,-77,-57,-49,95,30,-45,21,-30,85,-6,22,0,-1,-100,36,-33,-35,-75, 
  /* [1][0][][] */ -8,62,-20,-34,-72,62,-19,-47,-32,72,-15,15,59,43,-56,-3,-25,-119,78,-57,127,9,-64,21,60,-2,-86,59,38,-8,76,29,-34,-12,1,-11,-11,106,-13,-19,72,40,-11,16,109,22,-23,59, 
  /* [2][0][][] */ -18,-33,119,-2,96,-42,-7,31,-31,0,-10,49,12,-45,-51,-127,-57,-97,-25,14,-98,21,-49,-30,-43,15,1,-49,-44,6,-26,-17,-6,-3,28,-3,21,-33,-49,14,40,-36,30,-46,-48,-44,-62,-44, 
  /* [3][0][][] */ 56,18,69,10,20,-31,41,81,-62,-27,47,-24,-69,64,-17,51,75,26,-37,36,-115,-70,127,-15,-2,5,-68,-37,-56,70,120,-67,-6,-117,-19,44,-15,-85,-12,72,-79,-66,65,1,-94,-75,63,-19, 
  /* [4][0][][] */ 18,-15,69,-25,9,-8,-5,-8,-56,-7,-19,6,42,-67,40,-94,40,40,-7,-31,7,34,12,3,-2,6,51,-20,26,20,-127,-10,-31,-22,6,17,44,-5,34,3,-43,-14,-70,25,-13,-91,1,18, 
  /* [5][0][][] */ 27,-50,65,33,36,21,32,2,-78,-10,-48,32,37,7,9,-44,93,77,-2,-18,91,-60,127,-98,-20,51,-3,45,14,16,-36,-50,-25,-45,-34,13,50,26,68,6,-78,25,31,27,53,-21,80,-5, 
  /* [6][0][][] */ -48,52,-127,91,42,22,32,18,-22,-4,56,-70,-91,-19,-24,29,-113,29,-11,91,17,39,-79,-99,-17,-25,21,74,-36,-34,-46,12,36,72,-42,-31,-11,-6,81,4,69,69,-111,-50,-31,117,-53,-42, 
  /* [7][0][][] */ 38,75,-85,22,15,61,121,73,44,71,-109,-3,-50,2,-73,-54,29,37,118,105,82,2,127,27,111,106,-55,104,-69,35,-4,-76,23,-78,-31,23,5,98,-63,79,-64,52,-7,-93,80,-16,57,-32, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0036927461624145508, 0.0043711438775062561, 0.0056315753608942032, 0.0038532991893589497, 0.0059806602075695992, 0.005768580362200737, 0.0038990429602563381, 0.0036269680131226778, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 127, 10554, -485, -661, -124, -725, 2554, -2447, -4693, 245, -5557, -18, 268, -995, -3238, 3149, 4433, 4172, 455, -4514, -6545, -1872, 15935, -3908, -128, -621, 6472, -5981, 37, -280, -8818, 7514, 5354, -393, 4642, -56, -9, -301, 10720, 1117, 5102, -2698, 3241, 6438, -1438, 8477, -1112, 138, };
const TfArray<48, float> quant28_scale = { 48, { 0.00024519930593669415, 0.00015012786025181413, 0.00095591339049860835, 0.00024123657203745097, 0.00024383176059927791, 0.00028649778687395155, 0.00024249430862255394, 0.00032489569275639951, 8.5186926298774779e-05, 0.00026725430507212877, 0.00023180937569122761, 0.0021507334895431995, 0.00049493281403556466, 0.00058769789757207036, 0.00035889976425096393, 0.00077945220982655883, 0.00022975221509113908, 6.4786167058628052e-05, 0.00029286541393958032, 0.00029969989554956555, 0.00031944646616466343, 0.00025270867627114058, 9.4677598099224269e-05, 0.00043896419811062515, 0.00020574050722643733, 0.00049837533151730895, 0.00052583927754312754, 0.000241594243561849, 0.00030764448456466198, 0.00048247637460008264, 0.00012288520520087332, 0.00014254302368499339, 0.00013793644029647112, 0.00018385268049314618, 0.00012257078196853399, 0.00034509488614276052, 0.0023743284400552511, 0.00038656013202853501, 0.00013529507850762457, 0.00018800195539370179, 0.0001747537316987291, 0.00015871862706262618, 0.00027511382359080017, 0.00020166616013739258, 0.00044406921369954944, 7.8862991358619183e-05, 7.6509481004904956e-05, 0.00018974466365762055, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -2,-44,7,8,-16,-119,-40,46,-28,-4,-6,5,44,-5,-9,6,97,13,25,6,-3,-14,-75,19,-2,-20,-6,-31,-66,75,-8,-101,56,2,-61,-55,-8,-32,6,-15,-13,43,6,1,-13,68,127,-26, -127,-95,-24,127,-61,76,-97,127,35,15,12,-9,49,17,2,-39,-29,68,25,14,1,127,10,127,127,-35,-42,38,69,-116,-4,-70,73,2,-53,-127,26,12,-52,-51,-127,-5,-93,-119,33,51,48,118, -13,-6,9,9,-21,33,32,54,20,-38,1,-1,-22,-1,-2,5,-61,38,-70,-21,-11,-22,127,24,-53,1,10,0,21,42,16,12,-2,-9,-48,65,9,6,12,71,25,-22,23,-38,-9,38,-26,-20, 
  /* [0][1][][] */ -15,-18,-29,6,35,-127,127,-72,-7,11,18,37,127,19,3,-29,-20,-32,19,43,64,-56,38,8,-67,127,-82,-19,127,-96,51,-127,-40,9,-92,20,11,-66,-46,4,124,127,7,-127,-61,-51,-1,87, 96,-127,127,8,127,60,-71,-39,30,127,127,-127,-93,127,127,127,127,127,112,127,127,122,2,2,109,-102,-127,127,34,127,127,4,-127,127,127,126,-127,127,-127,-127,43,43,-127,-34,127,-127,-11,87, 22,31,-40,0,-43,109,-122,91,120,-80,12,62,-37,14,12,-61,15,6,-127,18,17,-103,-37,-4,62,-12,-24,123,-78,-36,29,-31,-30,20,97,-24,38,-7,-7,-92,114,1,29,41,-53,110,85,-87, 
  /* [0][2][][] */ -5,20,5,-30,6,-77,-17,-6,6,-3,-3,5,-17,-10,7,1,-45,3,3,-35,1,-15,83,-13,-119,7,33,-21,9,-3,3,41,-11,-7,-74,38,-1,-10,15,40,-25,-2,10,5,-13,28,-15,15, 38,-23,-35,-36,31,32,118,-89,127,-36,-7,7,-74,-18,-9,-66,-15,91,-3,26,7,35,-23,-34,-87,62,71,-11,-101,13,-29,-2,-24,-2,-39,6,53,-29,-2,110,-115,-3,-10,57,38,61,6,-127, -5,22,4,-20,-9,-20,-6,-50,-24,-22,-14,6,17,-9,-3,15,48,22,-29,-16,-8,-15,-47,-15,14,-20,18,-17,-21,1,-5,29,26,-14,-19,-46,-7,2,23,5,-7,-14,7,6,-10,30,53,-55, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.010420970618724823, 0.0063804341480135918, 0.040626317262649536, 0.010252553969621658, 0.010362849570810795, 0.012176156044006348, 0.010306008160114288, 0.013808066956698895, 0.00362044433131814, 0.011358307674527168, 0.0098518980666995049, 0.091406174004077911, 0.021034644916653633, 0.02497716061770916, 0.015253240242600441, 0.033126719295978546, 0.0097644692286849022, 0.0027534121181815863, 0.012446779757738113, 0.012737245298922062, 0.013576474040746689, 0.010740118101239204, 0.0040237978100776672, 0.018655978143215179, 0.008743971586227417, 0.021180950105190277, 0.022348169237375259, 0.010267755016684532, 0.013074890710413456, 0.02050524577498436, 0.0052226213738322258, 0.00605807825922966, 0.005862298421561718, 0.0078137386590242386, 0.0052092578262090683, 0.014666532166302204, 0.10090895742177963, 0.016428805887699127, 0.005750040989369154, 0.0079900827258825302, 0.0074270335026085377, 0.0067455414682626724, 0.01169233676046133, 0.0085708117112517357, 0.018872940912842751, 0.0033516769763082266, 0.0032516529317945242, 0.0080641480162739754, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2273, 3651, 15090, 1592, 2229, -1085, 4930, 10211, 3481, -540, 3315, -2153, 16397, -1851, 1534, 22114, -233, 1915, 131, 2464, 3213, 3438, 464, 18740, 5970, 3355, 16702, 1493, 5302, 4535, 634, 773, 820, 1543, -142, 242, -2917, -441, 1945, 1810, 4378, 1885, 3276, 3880, 4414, 3119, 1396, 5142, };
const TfArray<48, float> quant30_scale = { 48, { 0.0002695075236260891, 0.00021313046454451978, 6.4608400862198323e-05, 0.00017846819537226111, 0.00022316040121950209, 0.00034481592592783272, 0.00015837617684155703, 9.2342430434655398e-05, 0.00016520907229278237, 0.00031373932142741978, 0.00025018071755766869, 0.00021987769287079573, 5.8382091083331034e-05, 0.00023872486781328917, 0.00028321999707259238, 4.9053396651288494e-05, 0.00032945076236501336, 0.00021595126600004733, 0.00032491493038833141, 0.00023731080000288785, 0.00023303102352656424, 0.00021570555691141635, 0.00039152454701252282, 5.5532036640215665e-05, 0.00014420341176446527, 0.00016718286497052759, 6.3004619732964784e-05, 0.00027521606534719467, 0.00014566683967132121, 0.00016085592505987734, 0.00046761022531427443, 0.00052408297779038548, 0.0002351498551433906, 0.00023693520051892847, 0.00035675990511663258, 0.00032067205756902695, 0.00020113395294174552, 0.00033973268000409007, 0.00029133851057849824, 0.00028570034191943705, 0.00018663852824829519, 0.00027161886100657284, 0.00024202118220273405, 0.00021408406610134989, 0.00016552784654777497, 0.00023380802304018289, 0.00046983297215774655, 0.0001602109259692952, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 50,127,-89,-92,12,89,20,77, 
  /* [1][0][][] */ 46,-73,47,-127,-50,70,-68,-32, 
  /* [2][0][][] */ -37,127,124,48,107,15,60,10, 
  /* [3][0][][] */ 96,55,-94,64,-9,-110,-127,-32, 
  /* [4][0][][] */ -39,30,22,-72,-23,96,127,50, 
  /* [5][0][][] */ 24,81,-127,-70,46,83,21,-35, 
  /* [6][0][][] */ -15,127,61,56,77,20,27,-91, 
  /* [7][0][][] */ 127,-18,-27,32,24,-3,95,19, 
  /* [8][0][][] */ 64,127,65,95,117,82,100,-103, 
  /* [9][0][][] */ 60,113,-127,-90,11,99,9,72, 
  /* [10][0][][] */ -64,-41,21,-53,-5,-31,-58,127, 
  /* [11][0][][] */ 16,-112,-127,-15,15,-14,38,-10, 
  /* [12][0][][] */ -20,-109,-127,-44,-108,17,-65,52, 
  /* [13][0][][] */ -9,15,-100,110,-127,-27,-1,-13, 
  /* [14][0][][] */ -64,-44,-127,-10,37,-3,-12,-58, 
  /* [15][0][][] */ 29,-104,-127,15,-94,-28,-32,-12, 
  /* [16][0][][] */ 127,-70,-23,66,-84,22,29,93, 
  /* [17][0][][] */ -28,113,127,-31,-47,-13,-22,-22, 
  /* [18][0][][] */ 10,-127,51,80,-2,-65,52,-92, 
  /* [19][0][][] */ 127,-46,-56,35,-94,7,41,102, 
  /* [20][0][][] */ -29,-127,84,83,-14,-95,-5,-77, 
  /* [21][0][][] */ -7,-61,-18,-39,127,-5,56,17, 
  /* [22][0][][] */ -127,26,-87,46,46,53,-100,-114, 
  /* [23][0][][] */ -95,-39,72,-5,-86,116,127,-40, 
  /* [24][0][][] */ -31,52,-3,-36,-50,127,122,-19, 
  /* [25][0][][] */ -52,-113,-127,-54,-51,-21,-17,-45, 
  /* [26][0][][] */ -11,62,-13,127,-102,49,-57,-6, 
  /* [27][0][][] */ 23,-121,32,84,19,-62,0,-127, 
  /* [28][0][][] */ 14,127,52,44,118,-15,15,-63, 
  /* [29][0][][] */ 97,19,-44,-15,70,-127,-96,34, 
  /* [30][0][][] */ 27,-5,35,-127,19,-20,18,-27, 
  /* [31][0][][] */ 49,-43,6,69,-16,34,14,127, 
  /* [32][0][][] */ -89,-60,15,-54,-71,127,57,98, 
  /* [33][0][][] */ -36,45,49,-47,34,127,-116,69, 
  /* [34][0][][] */ 29,127,-73,-49,15,47,-61,66, 
  /* [35][0][][] */ 8,-127,36,66,-30,-60,47,-81, 
  /* [36][0][][] */ -17,-38,-85,-12,-127,-60,-18,10, 
  /* [37][0][][] */ -59,-127,78,90,-46,-93,-14,-53, 
  /* [38][0][][] */ -77,26,70,-71,-127,-82,-59,86, 
  /* [39][0][][] */ 62,-127,83,36,-4,-73,-9,-69, 
  /* [40][0][][] */ 1,55,18,47,-127,-15,-65,20, 
  /* [41][0][][] */ 113,127,-83,-98,51,12,-12,7, 
  /* [42][0][][] */ -12,-35,-15,16,127,10,46,19, 
  /* [43][0][][] */ 127,25,85,26,-74,-24,67,109, 
  /* [44][0][][] */ 69,50,-18,17,76,-111,-127,22, 
  /* [45][0][][] */ 44,14,23,23,72,-127,-3,-51, 
  /* [46][0][][] */ 60,-36,-10,127,38,53,17,68, 
  /* [47][0][][] */ -75,-79,43,68,-46,29,127,-75, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0035283083561807871, 0.0027902375441044569, 0.00084583304123952985, 0.002336449921131134, 0.0029215463437139988, 0.0045142224989831448, 0.0020734115969389677, 0.0012089182855561376, 0.0021628655958920717, 0.0041073774918913841, 0.0032752880360931158, 0.0028785702306777239, 0.00076432013884186745, 0.0031253115739673376, 0.0037078277673572302, 0.00064219179330393672, 0.0043130666017532349, 0.0028271665796637535, 0.0042536850087344646, 0.0031067989766597748, 0.0030507694464176893, 0.0028239497914910316, 0.0051257172599434853, 0.00072700809687376022, 0.001887866179458797, 0.0021887058392167091, 0.00082483683945611119, 0.0036030430346727371, 0.0019070247653871775, 0.0021058756392449141, 0.0061218072660267353, 0.0068611307069659233, 0.0030785086564719677, 0.0031018818262964487, 0.0046705892309546471, 0.004198138602077961, 0.0026331830304116011, 0.0044476743787527084, 0.0038141128607094288, 0.0037402999587357044, 0.00244341348297894, 0.0035559495445340872, 0.0031684658024460077, 0.0028027219232171774, 0.0021670388523489237, 0.0030609418172389269, 0.0061509069055318832, 0.0020974315702915192, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7780, 15864, -5060, 7514, -824, 3702, -11191, -18772, };
const TfArray<8, float> quant32_scale = { 8, { 0.0002372035087319091, 0.00011147647455800325, 0.00014203407044988126, 0.00015642330981791019, 0.00021679264318663627, 0.00018456084944773465, 0.00022444057685788721, 0.00014389923308044672, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-5,30,9,-33,-14,10,9,-42,-7,-64,-55,-24,-68,-9,-30,45,-38,38,40,-16,32,-36,15,0,-40,54,-12,-3,-16,17,10,82,35,36,-127,14,-1,-16,-34,1,-20,45,46,33,4,26,1, 
  /* [1][0][][] */ 8,39,64,-24,-10,47,-50,-33,6,27,-20,-93,13,95,-18,60,-19,19,-25,-56,5,-82,-31,21,-76,-11,-4,-122,-26,-13,34,-60,47,79,-43,7,127,-30,6,51,-31,41,-85,-28,121,-19,-33,-21, 
  /* [2][0][][] */ 1,-20,-62,16,0,42,28,3,-8,38,-7,29,65,-91,14,-58,34,-89,29,35,-26,52,-3,27,-20,62,-26,-70,15,4,19,-70,-45,-88,33,-23,101,22,-7,-59,-1,29,75,33,127,18,21,26, 
  /* [3][0][][] */ -5,24,-67,39,15,-38,-68,-103,11,-23,-37,-2,-1,24,35,75,-8,17,-38,23,1,-96,28,-56,-76,-14,127,-14,-41,2,-65,15,-2,-81,9,-17,-26,-41,-26,106,-44,-38,-1,15,34,3,-43,40, 
  /* [4][0][][] */ -24,-47,-4,7,31,-28,-9,-9,27,-31,59,-78,3,29,9,14,-20,-24,10,-13,-4,-52,5,-18,17,-13,39,47,35,19,-16,28,-11,0,1,-1,-70,82,37,-25,28,-21,-20,-23,-79,11,127,11, 
  /* [5][0][][] */ 41,-21,3,10,26,-44,35,-127,26,-29,-9,121,-80,64,25,-65,0,-89,17,4,-33,68,-33,-45,-62,74,-23,2,-22,50,-42,-36,30,51,30,-4,-43,-12,-49,-43,18,-40,-43,-10,-36,57,89,15, 
  /* [6][0][][] */ 52,-24,20,-12,-37,-23,-40,20,-42,7,-39,127,-45,-38,-4,58,12,46,14,31,38,-85,-21,19,21,36,-63,5,9,-45,13,41,5,13,-18,-4,11,0,-5,-6,-7,-16,43,55,-4,-35,74,-16, 
  /* [7][0][][] */ -26,3,-7,61,31,31,7,29,22,5,68,-3,125,104,62,49,45,48,-12,2,22,-20,-84,-26,14,1,-29,64,33,-22,-31,-17,38,9,41,-94,-73,37,38,55,-32,33,85,127,-58,-29,-105,58, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.010081148706376553, 0.0047377501614391804, 0.0060364478267729282, 0.0066479905508458614, 0.0092136869207024574, 0.007843836210668087, 0.0095387240871787071, 0.0061157173477113247, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 13929, 6441, 3128, -590, 2370, -2331, -576, 31415, -742, 1313, 6531, 58436, 1865, 4213, -271, 11603, -1445, 13385, 550, 6762, 11792, -34, 2679, -8870, 10849, 1877, 104, 13079, 719, -1912, -8697, 10488, 3997, 2099, 833, 5306, -8851, 8107, -2421, 19664, -648, -1355, 3339, 2601, 924, -1605, 1461, -1065, };
const TfArray<48, float> quant34_scale = { 48, { 8.7902051745913923e-05, 8.4495142800733447e-05, 0.00019688357133418322, 0.00015741605602670461, 0.00067843240685760975, 0.00015264295507222414, 0.00014739007747266442, 0.00010135716001968831, 0.0001187312591355294, 9.438605047762394e-05, 7.4765965109691024e-05, 5.2121715270914137e-05, 9.1862799308728427e-05, 6.7938111897092313e-05, 0.00029788326355628669, 0.00015411729691550136, 0.0001251226058229804, 0.00034932271228171885, 0.00014433130854740739, 0.00014800207281950861, 0.00011195828847121447, 0.00037729382165707648, 0.000120756340038497, 0.00027894950471818447, 0.0001172270203824155, 6.168681284179911e-05, 6.1522747273556888e-05, 8.104329026537016e-05, 0.00016802415484562516, 0.00089973723515868187, 0.00026832110597752035, 9.0634166554082185e-05, 9.3805487267673016e-05, 0.00017520756227895617, 0.0001787755754776299, 5.8524838095763698e-05, 8.479227835778147e-05, 4.94391679239925e-05, 0.00012061029701726511, 6.7942106397822499e-05, 0.00014037633081898093, 0.00016361306188628078, 8.4847531979903579e-05, 7.5541094702202827e-05, 8.1950449384748936e-05, 0.00034763175062835217, 7.0715337642468512e-05, 0.0001809707609936595, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -48,-103,-3,-21,127,-44,93,-64,-87,-76,-21,-39,115,35,79,-127,65,-24,3,-39,-78,114,1,8,-19,83,73,-40,74,-65,4,-41,-113,-80,43,65,22,76,110,-66,-127,-11,38,66,50,-127,79,81, -64,-124,-73,50,-90,108,81,-69,-68,42,82,-103,127,92,118,-76,-83,-80,31,-54,-71,92,-59,115,-89,106,96,-126,89,-48,9,-114,-57,-84,69,119,111,111,127,-60,-127,-60,67,79,79,121,84,77, 5,-50,-66,94,-51,-21,35,-2,89,28,58,-69,29,54,-32,-1,-84,-17,28,-33,-16,19,-74,0,-79,57,17,-90,33,57,117,-66,9,11,-15,51,75,66,53,1,-16,98,62,26,37,33,14,-119, 
  /* [0][1][][] */ -120,-101,-5,-75,-89,-63,96,-121,-127,-127,86,-73,81,50,-118,-78,127,-127,-61,-77,-98,115,-42,5,-13,96,110,-57,-107,-74,-6,-47,-97,-127,-127,65,43,87,12,-95,55,-11,76,117,81,119,119,-123, -127,-127,-127,-100,-35,127,127,-127,95,67,127,-127,94,127,73,-119,54,-92,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-14,-127,-127,-106,41,127,127,127,-2,-127,98,-92,127,127,127,1,127,127, -59,-62,-119,127,69,-36,40,-24,67,29,15,-58,9,62,80,-50,-17,2,-18,-64,-61,25,-74,-12,-118,56,17,-99,-51,39,127,-82,-53,10,53,78,83,72,-14,-37,44,127,77,17,49,-48,26,29, 
  /* [0][2][][] */ -119,-32,28,26,-49,-21,27,-47,33,-44,11,-38,-2,16,-38,-15,-80,-26,98,-33,-6,51,-56,-17,-2,67,80,-26,29,60,-13,-5,15,-78,-45,38,17,13,-48,-50,18,-5,32,44,28,60,19,-64, -95,-45,-38,-68,90,43,67,-56,100,22,-46,-65,-9,37,-127,-80,38,6,52,-65,-41,40,-51,50,-63,78,76,-48,32,7,-30,-41,-58,-18,-67,55,33,19,-91,-78,24,-45,76,71,44,-111,28,8, -34,-27,-48,-23,-30,-8,23,-20,-67,12,-25,-20,-14,12,33,-25,38,36,2,-43,-35,-2,-9,-25,-63,19,15,-36,5,-60,57,-24,-84,17,15,49,24,21,-44,-39,1,44,25,23,17,-2,9,40, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.003735837060958147, 0.0035910436417907476, 0.0083675514906644821, 0.0066901822574436665, 0.028833376243710518, 0.0064873252995312214, 0.0062640784308314323, 0.0043076793663203716, 0.0050460784696042538, 0.0040114070288836956, 0.0031775534152984619, 0.0022151728626340628, 0.0039041689597070217, 0.0028873698320239782, 0.012660038657486439, 0.0065499846823513508, 0.0053177103400230408, 0.014846215024590492, 0.0061340807005763054, 0.0062900879420340061, 0.0047582271508872509, 0.016034986823797226, 0.0051321443170309067, 0.011855353601276875, 0.0049821482971310616, 0.0026216895785182714, 0.0026147167664021254, 0.0034443396143615246, 0.0071410266682505608, 0.038238830864429474, 0.011403646320104599, 0.0038519520312547684, 0.0039867330342531204, 0.0074463211931288242, 0.0075979619286954403, 0.0024873055517673492, 0.0036036716774106026, 0.0021011645440012217, 0.0051259375177323818, 0.0028875395655632019, 0.0059659937396645546, 0.0069535551592707634, 0.0036060200072824955, 0.0032104963902384043, 0.0034828940406441689, 0.014774349518120289, 0.0030054019298404455, 0.0076912571676075459, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1012, -425, -432, 986, 13277, 1387, -380, 3639, 1304, 1065, 153, 2866, 963, 519, -896, 332, 2608, 9735, 2743, -728, 1041, -1185, -116, 2162, -256, -667, 1451, -51, 2712, 13725, 2047, -14, 362, -56, 2378, 63, 505, -207, 943, 1076, 1389, 1647, 173, -231, 686, 2163, 1211, -165, };
const TfArray<48, float> quant36_scale = { 48, { 0.0005167756462469697, 0.00044306795462034643, 0.00031194541952572763, 0.00040302297566086054, 7.5779986218549311e-05, 0.00041688507189974189, 0.00059251277707517147, 0.00024254180607385933, 0.00034418771974742413, 0.00060806708643212914, 0.00038505683187395334, 0.00031519532785750926, 0.00025714404182508588, 0.00043069812818430364, 0.00031706213485449553, 0.00035418549668975174, 0.00027691543800756335, 9.669039718573913e-05, 0.00027265326934866607, 0.00039185272180475295, 0.00045510518248192966, 0.00020971914636902511, 0.0005261131445877254, 0.00034793975646607578, 0.00051346118561923504, 0.00074878614395856857, 0.00037805407191626728, 0.00086202321108430624, 0.00030413773492909968, 7.2091177571564913e-05, 0.00036009229370392859, 0.00092417735140770674, 0.00045054970541968942, 0.00046006680349819362, 0.00031929288525134325, 0.00040671502938494086, 0.00039143196772783995, 0.00060475262580439448, 0.00045303013757802546, 0.00055329076712951064, 0.00038149851025082171, 0.0003816516837105155, 0.00038376942393369973, 0.00057620892766863108, 0.00044311760575510561, 0.00024239762569777668, 0.00030421689734794199, 0.00040056151919998229, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -43,30,9,-12,-84,-40,-127,32, 
  /* [1][0][][] */ 84,-70,-53,-56,127,-80,86,23, 
  /* [2][0][][] */ -113,125,-51,-127,55,-22,-24,45, 
  /* [3][0][][] */ 51,25,96,10,102,117,127,-20, 
  /* [4][0][][] */ -74,-127,71,10,-59,-119,2,-35, 
  /* [5][0][][] */ 127,-19,67,71,-63,-4,-7,-15, 
  /* [6][0][][] */ 23,35,127,-26,41,-35,-42,30, 
  /* [7][0][][] */ 25,9,-127,-40,-37,97,97,-76, 
  /* [8][0][][] */ -5,127,-41,7,63,107,49,58, 
  /* [9][0][][] */ -9,127,-63,93,19,-110,37,125, 
  /* [10][0][][] */ 5,-127,-3,-22,-77,-114,-53,-76, 
  /* [11][0][][] */ -127,-79,113,54,-6,-64,106,64, 
  /* [12][0][][] */ -24,46,-127,90,35,-45,-82,108, 
  /* [13][0][][] */ 91,-127,94,80,10,33,40,-60, 
  /* [14][0][][] */ -30,88,-29,-127,-25,-112,-33,-66, 
  /* [15][0][][] */ 45,118,25,-22,41,-68,92,-127, 
  /* [16][0][][] */ -114,-127,-63,89,-50,24,-18,82, 
  /* [17][0][][] */ -19,-101,-127,81,-53,73,-55,71, 
  /* [18][0][][] */ -93,-68,-46,92,-3,77,3,127, 
  /* [19][0][][] */ 64,-127,99,-115,6,-59,33,-30, 
  /* [20][0][][] */ 1,80,29,8,50,127,72,-14, 
  /* [21][0][][] */ 26,114,45,-35,39,-71,93,-127, 
  /* [22][0][][] */ 20,7,102,24,-14,127,32,-33, 
  /* [23][0][][] */ -100,-69,35,-69,96,110,-67,-127, 
  /* [24][0][][] */ -101,-88,40,-80,105,109,-42,-127, 
  /* [25][0][][] */ 127,9,-58,-16,19,34,-65,-5, 
  /* [26][0][][] */ -127,-34,-121,-29,-48,-30,21,-6, 
  /* [27][0][][] */ 81,35,-4,-63,-127,-25,87,90, 
  /* [28][0][][] */ -127,-87,11,55,-79,-101,1,5, 
  /* [29][0][][] */ 127,104,43,-126,33,12,-64,-88, 
  /* [30][0][][] */ -86,-70,37,-69,71,94,-51,-127, 
  /* [31][0][][] */ 49,45,-5,127,7,-73,8,9, 
  /* [32][0][][] */ -30,127,-5,42,19,74,-15,54, 
  /* [33][0][][] */ -31,127,-70,27,23,-35,-20,-3, 
  /* [34][0][][] */ -127,-114,-50,106,-12,17,21,102, 
  /* [35][0][][] */ -50,127,-31,-5,69,100,53,66, 
  /* [36][0][][] */ 71,33,2,-42,-127,-21,111,117, 
  /* [37][0][][] */ -64,111,28,24,-127,110,-25,-96, 
  /* [38][0][][] */ 41,39,40,30,127,82,118,54, 
  /* [39][0][][] */ -19,-69,33,-22,16,39,-102,127, 
  /* [40][0][][] */ -70,-59,-75,127,-30,3,13,67, 
  /* [41][0][][] */ 127,10,55,102,-50,2,-1,-15, 
  /* [42][0][][] */ -42,7,-69,-127,53,-105,2,82, 
  /* [43][0][][] */ 24,-7,86,-6,36,127,87,10, 
  /* [44][0][][] */ -29,-25,-65,127,48,13,-42,-38, 
  /* [45][0][][] */ 65,121,109,-127,51,-65,15,-117, 
  /* [46][0][][] */ -35,-127,-42,23,-3,36,-63,119, 
  /* [47][0][][] */ 42,43,127,6,97,127,123,-21, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0047254632227122784, 0.0040514706633985043, 0.0028524692170321941, 0.003685294184833765, 0.0006929419469088316, 0.0038120509125292301, 0.0054180133156478405, 0.0022178336512297392, 0.0031472970731556416, 0.0055602439679205418, 0.0035210093483328819, 0.0028821867890655994, 0.002351358300074935, 0.0039383592084050179, 0.0028992570005357265, 0.0032387180253863335, 0.0025321505963802338, 0.00088414945639669895, 0.0024931766092777252, 0.0035831518471240997, 0.0041615404188632965, 0.0019176990026608109, 0.0048108464106917381, 0.0031816060654819012, 0.0046951551921665668, 0.0068469969555735588, 0.0034569753333926201, 0.0078824516385793686, 0.0027810747269541025, 0.00065921101486310363, 0.0032927303109318018, 0.008450796827673912, 0.0041198846884071827, 0.0042069102637469769, 0.0029196552932262421, 0.0037190546281635761, 0.0035793045535683632, 0.0055299359373748302, 0.0041425661183893681, 0.0050593623891472816, 0.003488471731543541, 0.003489872207865119, 0.0035092371981590986, 0.0052689285948872566, 0.0040519246831536293, 0.0022165151312947273, 0.0027817985974252224, 0.0036627862136811018, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7236, -2944, 11643, -9612, 23554, 8037, -8607, 11412, };
const TfArray<8, float> quant38_scale = { 8, { 0.0001943331299116835, 0.00023518753005191684, 0.0001884341036202386, 0.00022564140090253204, 0.00019425681966822594, 0.00016189069719985127, 0.00018570107931736857, 0.00026988424360752106, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -13,-13,-18,-66,-28,-33,23,-18,36,10,-30,-7,107,127,-16,-104, 
  /* [1][0][][] */ 127,-61,-45,19,-48,73,-66,-42,-40,87,-33,-54,-10,4,-63,-16, 
  /* [2][0][][] */ -36,-96,43,43,49,-54,-83,-22,34,-89,29,-127,50,-24,-76,25, 
  /* [3][0][][] */ 39,10,16,15,-14,69,-55,-23,127,46,9,21,1,-13,11,22, 
  /* [4][0][][] */ -96,-39,-26,-127,-9,38,57,-122,34,-18,-48,-41,-125,34,-41,-23, 
  /* [5][0][][] */ 89,51,73,-30,46,-46,-127,-125,-19,-77,65,50,-59,48,67,-46, 
  /* [6][0][][] */ 106,39,-127,-70,26,-71,6,-89,-44,24,-126,94,87,-87,5,72, 
  /* [7][0][][] */ -127,-4,97,-32,-69,3,-2,-61,-52,60,84,-32,61,-27,30,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0082591576501727104, 0.0099954698234796524, 0.0080084493383765221, 0.0095897596329450607, 0.0082559147849678993, 0.0068803546018898487, 0.0078922957181930542, 0.011470080353319645, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 22796, -380, -187, 3312, -840, 267, 11285, 1487, -498, 171, -2008, 3215, -1559, -576, -359, -1093, };
const TfArray<16, float> quant40_scale = { 16, { 0.00010179108357988298, 0.00019745931786019355, 0.00015628203982487321, 0.00015187887765932828, 0.0011955522932112217, 0.00095510657411068678, 0.00015286430425476283, 0.0008342452347278595, 0.00032454662141390145, 0.0012357978848740458, 0.00021131345420144498, 0.00019749447528738528, 0.00011053392518078908, 0.00024630801635794342, 0.00020323654462117702, 0.00065732147777453065, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -1,-4,4,3,-19,11,5,15,-6,-11,-3,-11,0,-6,1,1, 1,-6,3,3,13,-2,7,-26,-8,9,-8,82,-6,21,7,1, -2,-6,-2,1,3,-14,-7,11,2,2,-5,-13,4,-4,-3,1, 
  /* [0][1][][] */ 11,-11,0,4,127,-24,-127,-21,127,127,-2,-5,111,-24,-2,-16, -127,127,127,0,-87,-91,-16,-102,16,-105,127,127,127,127,127,127, 17,-6,-6,1,-9,127,0,-10,-2,-12,-6,-6,11,-4,-13,-6, 
  /* [0][2][][] */ 0,-4,0,-16,-19,16,51,6,-11,-7,-1,1,-2,0,-5,-8, 21,-14,-4,-127,6,-16,-11,127,-7,1,2,-14,-9,-59,-8,-32, 1,-4,-3,-4,1,-5,-3,-2,0,2,-2,0,3,-6,-6,-8, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.00432612095028162, 0.0083920210599899292, 0.0066419863142073154, 0.0064548524096608162, 0.050810970366001129, 0.040592029690742493, 0.0064967325888574123, 0.035455420613288879, 0.01379323098808527, 0.052521411329507828, 0.008980821818113327, 0.0083935149013996124, 0.0046976916491985321, 0.010468090884387493, 0.0086375530809164047, 0.027936162427067757, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1250, 65, 101, -267, 46623, 50476, 5298, 13527, 4384, 13693, 944, -43, 4260, 5915, 78, 25531, };
const TfArray<16, float> quant42_scale = { 16, { 0.0002422254765406251, 0.00088051182683557272, 0.00030832618358545005, 0.00018277476192452013, 2.9520637326641008e-05, 2.8567828849190846e-05, 0.00015249500575009733, 2.8262693376746029e-05, 0.00018876206013374031, 3.3344436815241352e-05, 0.00049453339306637645, 0.00076865381561219692, 0.00039394211489707232, 1.7681630197330378e-05, 0.0006844295421615243, 3.6460460250964388e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -37, 17, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -24, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -21, -14, 
  /* [3][2][][] */ -101, -126, -43, 
  /* [4][0][][] */ 31, -54, 2, 
  /* [4][1][][] */ 29, -127, 0, 
  /* [4][2][][] */ 16, -88, -15, 
  /* [5][0][][] */ -64, 20, -3, 
  /* [5][1][][] */ -127, 25, 1, 
  /* [5][2][][] */ -80, 21, -3, 
  /* [6][0][][] */ -19, 78, 127, 
  /* [6][1][][] */ -53, 55, -18, 
  /* [6][2][][] */ -39, -54, -91, 
  /* [7][0][][] */ 37, 27, -16, 
  /* [7][1][][] */ 127, 68, -7, 
  /* [7][2][][] */ 35, 8, -20, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -19, 52, -6, 
  /* [9][1][][] */ -13, 127, -9, 
  /* [9][2][][] */ -5, 88, -4, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 79, 21, -14, 
  /* [13][1][][] */ 127, 102, -10, 
  /* [13][2][][] */ 89, 118, 47, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -85, -23, 23, 
  /* [15][1][][] */ -127, -127, 19, 
  /* [15][2][][] */ -29, -89, -19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.061767492443323135, 0.22453050315380096, 0.078623175621032715, 0.046607561409473419, 0.0075277620926499367, 0.0072847958654165268, 0.038886222988367081, 0.0072069861926138401, 0.048134323209524155, 0.0085028307512402534, 0.12610600888729095, 0.19600671529769897, 0.10045523196458817, 0.0045088152401149273, 0.17452952265739441, 0.0092974165454506874, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10935978591442108, } };
const TfArray<1, int> quant46_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.076384343206882477, } };
const TfArray<1, int> quant50_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.076758474111557007, } };
const TfArray<1, int> quant53_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.089281268417835236, } };
const TfArray<1, int> quant54_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.055347558110952377, } };
const TfArray<1, int> quant58_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.056938000023365021, } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&g0::quant50_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.073991410434246063, } };
const TfArray<1, int> quant62_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.043661478906869888, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.088137529790401459, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.036809790879487991, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1324554979801178, } };
const TfArray<1, int> quant69_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
